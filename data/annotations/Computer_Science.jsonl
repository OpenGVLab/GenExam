{"id": "Computer_Science_87", "prompt": "Given a 2-3 tree with a root node containing the value 5, a left child node containing 2, and a right child node containing 6 and 9, illustrate the structure of the tree after inserting the value 4 according to the rules of 2-3 trees. Show both the initial and resulting tree structures side by side, clearly indicating the changes after the insertion.", "image_path": "Computer_Science/Computer_Science_87.png", "scoring_points": [{"question": "Does the initial tree have a root node with value 5?", "score": 0.1}, {"question": "Does the initial left child node contain only the value 2?", "score": 0.1}, {"question": "Does the initial right child node contain the values 6 and 9?", "score": 0.1}, {"question": "After insertion, does the left child node contain the values 2 and 4 in sorted order?", "score": 0.2}, {"question": "After insertion, does the right child node remain unchanged with values 6 and 9?", "score": 0.1}, {"question": "Is the root node unchanged with value 5 after insertion?", "score": 0.1}, {"question": "Are both the initial and resulting tree structures shown side by side?", "score": 0.2}, {"question": "Are the changes after insertion clearly indicated?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/B_Tree", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_43", "prompt": "Given a singly linked list with nodes containing the values 1, 2, 3, 4, and 5 in order, illustrate the process of recursively reversing the linked list in groups of size K=2. For each recursive call, clearly indicate which segment is being reversed, the updated links, and the resulting list after each step. Show the state of the list after each group reversal, and label the head, reversed segment, and next pointer at each stage.", "image_path": "Computer_Science/Computer_Science_43.png", "scoring_points": [{"question": "Does the image show a singly linked list with nodes 1, 2, 3, 4, and 5 in order initially?", "score": 0.1}, {"question": "Is the process of reversing the list in groups of size K=2 depicted?", "score": 0.15}, {"question": "Are the intermediate states of the list after each group reversal shown?", "score": 0.15}, {"question": "Is each reversed segment clearly indicated in each step?", "score": 0.15}, {"question": "Are the head, reversed segment, and next pointer labeled at each stage?", "score": 0.15}, {"question": "Is the recursion process (multiple function calls) illustrated step by step?", "score": 0.15}, {"question": "Is the final state of the list after all reversals shown correctly?", "score": 0.15}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Linked_List", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_93", "prompt": "Draw a block diagram of a typical PC hardware architecture centered around the PCI bus. Include the following components: CPU with cache, PCI bridge, main memory connected via a memory bus, SCSI controller (connected to both SCSI disk and SCSI scanner via SCSI bus), video controller, and network controller. Clearly show the connections between all components, labeling the PCI bus, memory bus, and SCSI bus.", "image_path": "Computer_Science/Computer_Science_93.png", "scoring_points": [{"question": "Does a central PCI bus connect the PCI bridge, SCSI controller, video controller, and network controller?", "score": 0.1}, {"question": "Is the CPU shown with an attached cache (a smaller block directly connected to the CPU)?", "score": 0.07}, {"question": "Is the main memory connected via a distinct memory bus rather than individual point-to-point lines?", "score": 0.12}, {"question": "Does a PCI bridge sit between the CPU/memory side and the PCI bus, linking them?", "score": 0.18}, {"question": "Is the SCSI controller connected to the PCI bus?", "score": 0.06}, {"question": "Does a SCSI bus run from the SCSI controller to both a SCSI disk and a SCSI scanner?", "score": 0.18}, {"question": "Is the video controller connected to the PCI bus (and not directly to the CPU or memory)?", "score": 0.06}, {"question": "Is the network controller connected to the PCI bus (and not directly to the CPU or memory)?", "score": 0.06}, {"question": "Are the PCI bus, memory bus, and SCSI bus clearly shown as separate pathways and labeled accordingly?", "score": 0.09}, {"question": "Is the main memory not directly connected to the PCI bus (only to the CPU/bridge via the memory bus)?", "score": 0.08}], "taxonomy": "Computer/Hardware_Architecture/Bus_Structure", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_95", "prompt": "Draw four common instruction formats used in computer architecture: zero-address, one-address, two-address, and three-address instruction formats. For each format, represent the fields (such as OPCODE and ADDRESS/ADDR) as labeled boxes, and arrange them clearly. Label each format as (a), (b), (c), and (d) respectively.", "image_path": "Computer_Science/Computer_Science_95.png", "scoring_points": [{"question": "Does the image present four distinct instruction format diagrams (clearly separated layouts)?", "score": 0.1}, {"question": "Is there a zero-address instruction format that shows only an opcode field with no address fields?", "score": 0.2}, {"question": "Is there a one-address instruction format that shows an opcode field and exactly one address field?", "score": 0.18}, {"question": "Is there a two-address instruction format that shows an opcode field and exactly two address fields?", "score": 0.18}, {"question": "Is there a three-address instruction format that shows an opcode field and exactly three address fields?", "score": 0.18}, {"question": "Within each format, are the fields represented as contiguous, segmented boxes indicating bit fields?", "score": 0.06}, {"question": "Are the fields in each format clearly labeled within the boxes (e.g., 'OPCODE' and 'ADDRESS/ADDR')?", "score": 0.05}, {"question": "Are the four formats arranged in a clear, easily distinguishable layout (e.g., separated rows or columns) to avoid ambiguity between formats?", "score": 0.05}], "taxonomy": "Computer/Hardware_Architecture/Instruction_Format", "img_type": "other", "difficulty": "hard"}
{"id": "Computer_Science_63", "prompt": "Given an undirected weighted graph with 5 vertices labeled 0 to 4, draw both the graph and its adjacency matrix. The edges and their weights are as follows: (0,1) with weight 5; (1,2) with weight 7; (1,3) with weight 10; (2,3) with weight 3; (3,4) with weight 6. Use 'INF' to represent the absence of an edge in the adjacency matrix. Ensure the matrix is symmetric and the diagonal entries are 'INF'.", "image_path": "Computer_Science/Computer_Science_63.png", "scoring_points": [{"question": "Are there exactly 5 vertices labeled 0 to 4 in both the graph and the matrix?", "score": 0.1}, {"question": "Are the edges and their weights correctly represented in the graph: (0,1)=5, (1,2)=7, (1,3)=10, (2,3)=3, (3,4)=6?", "score": 0.2}, {"question": "Is the graph undirected (edges have no direction)?", "score": 0.1}, {"question": "Is the adjacency matrix a 5x5 grid with rows and columns labeled 0 to 4?", "score": 0.1}, {"question": "Are the weights correctly placed in the adjacency matrix, matching the graph's edges?", "score": 0.2}, {"question": "Are all non-adjacent pairs marked as 'INF' in the matrix?", "score": 0.1}, {"question": "Are all diagonal entries of the matrix 'INF'?", "score": 0.1}, {"question": "Is the adjacency matrix symmetric (A[i][j] = A[j][i])?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Undirected_Graph", "img_type": "trees and graphs", "difficulty": "medium"}
{"id": "Computer_Science_101", "prompt": "Draw a schematic diagram of a single-layer perceptron, labeling the following components: multiple input nodes (all labeled X1), corresponding weights (W1, W2, W3, W4), a summation node that computes the weighted sum plus a bias term (∑_{i=1}^m (w_i x_i) + bias), an activation function that outputs 1 if the sum is greater than or equal to zero and 0 otherwise, and a single output node (ŷ). Clearly indicate the flow of information from inputs to output and label each part.", "image_path": "Computer_Science/Computer_Science_101.png", "scoring_points": [{"question": "Are there multiple distinct input nodes feeding into the perceptron?", "score": 0.08}, {"question": "Are there at least four distinct weighted connections from inputs into the summation stage (corresponding to four weights)?", "score": 0.12}, {"question": "Is there a summation node explicitly placed before the activation function?", "score": 0.15}, {"question": "Does the summation node compute a weighted sum of the inputs (i.e., sum of w_i x_i terms)?", "score": 0.15}, {"question": "Is an explicit bias term added to the weighted sum before activation?", "score": 0.15}, {"question": "Is the activation function a threshold/step function that outputs 1 when the summed input is greater than or equal to 0 and 0 otherwise?", "score": 0.2}, {"question": "Is there a single output node placed after the activation function?", "score": 0.05}, {"question": "Is the direction of information flow clearly indicated with arrows from inputs to summation to activation to output?", "score": 0.1}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/Neural_Networks", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_85", "prompt": "Draw a directed graph that demonstrates the four types of edges encountered during a depth-first search (DFS) traversal: tree edge, back edge, forward edge, and cross edge. Clearly label each type of edge in the diagram, and ensure that the graph structure allows for all four edge types to be present and correctly classified according to their definitions in DFS traversal.", "image_path": "Computer_Science/Computer_Science_85.png", "scoring_points": [{"question": "Does the image show a directed graph?", "score": 0.1}, {"question": "Are there edges labeled as tree edge, back edge, forward edge, and cross edge?", "score": 0.2}, {"question": "Is there at least one tree edge, and is it correctly shown as an edge from a parent to a child in the DFS tree?", "score": 0.15}, {"question": "Is there at least one back edge, and is it correctly shown as an edge from a node to its ancestor in the DFS tree?", "score": 0.2}, {"question": "Is there at least one forward edge, and is it correctly shown as an edge from a node to a descendant (not direct child) in the DFS tree?", "score": 0.15}, {"question": "Is there at least one cross edge, and is it correctly shown as an edge between nodes in different branches of the DFS tree?", "score": 0.2}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Others", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_39", "prompt": "Draw a detailed diagram illustrating the encapsulation and decapsulation process of an HTTP request as it travels from a source computer to a destination computer across a network using the five-layer Internet protocol stack (Application, Transport, Network, Link, Physical). The diagram should show the addition and removal of headers at each layer, the path through intermediate devices such as a link-layer switch and a router, and label each protocol layer at each stage for both source and destination.", "image_path": "Computer_Science/Computer_Science_39.png", "scoring_points": [{"question": "Are all five layers (Application, Transport, Network, Link, Physical) clearly labeled for both the source and the destination hosts?", "score": 0.08}, {"question": "Does the depicted network path between the two hosts include both a link-layer switch and a router as intermediate devices?", "score": 0.12}, {"question": "At the source, is encapsulation shown by adding headers in order (Application data -> Transport header -> Network header -> Link header), with the application payload inside transport, then network, then link?", "score": 0.28}, {"question": "Is the switch depicted operating only at the link layer, affecting only the frame and not higher-layer contents?", "score": 0.24}, {"question": "Is the router depicted operating at the network layer, re-creating the link header on each interface while keeping the transport header unchanged?", "score": 0.14}, {"question": "At the destination, is decapsulation illustrated by removing the link, then network, then transport headers to deliver the original HTTP request to the application layer?", "score": 0.14}], "taxonomy": "Computer/Networking_and_Systems/Computer_Networks/TCP_and_IP_Protocol_Stack", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_86", "prompt": "Draw the structure of an in-order threaded binary tree, including a head node labeled 'H'. Each node should contain two bits indicating whether its left and right pointers are threads (0) or child links (1). The tree should include nodes labeled C, I, S, Q, U, K, R, O, and T, with appropriate solid lines for child links and dashed lines for threads, and the head node should point to the root and the rightmost node. Clearly distinguish between threads and child links in your diagram.", "image_path": "Computer_Science/Computer_Science_86.png", "scoring_points": [{"question": "Does the image include a head node labeled 'H'?", "score": 0.1}, {"question": "Are all nodes labeled with the specified letters (C, I, S, Q, U, K, R, O, T)?", "score": 0.1}, {"question": "Does each node contain two bits indicating whether its left and right pointers are threads (0) or child links (1)?", "score": 0.15}, {"question": "Are solid lines used for child links and dashed lines for threads?", "score": 0.15}, {"question": "Does the head node point to both the root and the rightmost node?", "score": 0.15}, {"question": "Are the threads and child links correctly assigned according to in-order threading rules?", "score": 0.25}, {"question": "Is the overall structure a binary tree with at most two children per node?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Others", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_99", "prompt": "Draw a schematic diagram illustrating the memory hierarchy in a modern computer system, including the following components in order from fastest and smallest to slowest and largest: registers, cache, main memory, solid-state disk, magnetic disk, optical disk, and magnetic tapes. Indicate with arrows the direction of increasing speed and cost per bit, and the direction of increasing size.", "image_path": "Computer_Science/Computer_Science_99.png", "scoring_points": [{"question": "Are all seven specified components present: registers, cache, main memory, solid-state disk, magnetic disk, optical disk, and magnetic tapes?", "score": 0.1}, {"question": "Are the components arranged in order from fastest/smallest to slowest/largest: registers → cache → main memory → solid-state disk → magnetic disk → optical disk → magnetic tapes?", "score": 0.35}, {"question": "Is there an arrow indicating the direction of increasing speed, oriented from the slowest/largest layer (magnetic tapes) toward the fastest/smallest layer (registers)?", "score": 0.15}, {"question": "Is there an arrow indicating the direction of increasing cost per bit, oriented from the slowest/largest layer (magnetic tapes) toward the fastest/smallest layer (registers)?", "score": 0.15}, {"question": "Is there an arrow indicating the direction of increasing size (capacity), oriented from the fastest/smallest layer (registers) toward the slowest/largest layer (magnetic tapes)?", "score": 0.15}, {"question": "Are the directional relationships consistent overall (speed and cost per bit decrease as you move from registers to magnetic tapes, while size increases)?", "score": 0.1}], "taxonomy": "Computer/Networking_and_Systems/Operating_System/Memory_Paging", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_16", "prompt": "Automata theory task: Draw a deterministic finite automaton over alphabet {a, b} with states {0,1,2,3,4,5,6,7}. The start state is 0. The accepting states are 0 and 6 (double circles). Required transitions: 0 --a--> 1; 6 --a--> 0; 1 --b--> 2; 2 --a--> 3; 3 --b--> 1; 1 --a--> 4; 4 --a--> 6; 4 --b--> 5; 2 --b--> 5; 5 --b--> 2; 5 --a--> 7; 7 --b--> 5; 6 --a--> 5. Place states roughly so that 0 is left, 1 and 2 are upper middle, 3 is upper right, 4 and 5 are below them, 7 is below 5, and 6 is bottom-left, with curved arrows as needed to reflect the specified directions.", "image_path": "Computer_Science/Computer_Science_16.png", "scoring_points": [{"question": "Are there exactly eight states labeled 0 through 7?", "score": 0.08}, {"question": "Is state 0 the unique start state with an incoming start arrow?", "score": 0.08}, {"question": "Are states 0 and 6 marked as accepting (double circles)?", "score": 0.1}, {"question": "Are the transitions 0 --a--> 1 and 6 --a--> 0 present and correctly directed?", "score": 0.1}, {"question": "Is the top cycle 1 --b--> 2 --a--> 3 --b--> 1 correctly formed with the stated labels?", "score": 0.16}, {"question": "Are the downward transitions 1 --a--> 4 --a--> 6 correctly included?", "score": 0.1}, {"question": "Are the connections to state 5 correct: 4 --b--> 5, 2 --b--> 5, and 5 --b--> 2?", "score": 0.16}, {"question": "Are the transitions between 5 and 7 exactly 5 --a--> 7 and 7 --b--> 5?", "score": 0.12}, {"question": "Is the diagonal transition 6 --a--> 5 present?", "score": 0.1}], "taxonomy": "Computer/Theory_and_AI/Finite_Automaton", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_24", "prompt": "Draw a schematic diagram of a traditional PC motherboard bus architecture, clearly showing the following components: CPU, RAM, North Bridge, South Bridge, Graphic Card, Hard Disk, and at least three PCI slots. Indicate the connections between these components using labeled buses: Memory Bus (between CPU and RAM via North Bridge), AGP Bus (between North Bridge and Graphic Card), Frontside Bus (between CPU and North Bridge), PCI Bus (connecting South Bridge to PCI slots), ATA Bus (connecting South Bridge to Hard Disk), and System Bus (with data, address, and control lines). Use different colors or line styles to distinguish the types of buses, and label each bus and component appropriately.", "image_path": "Computer_Science/Computer_Science_24.png", "scoring_points": [{"question": "Are the CPU, RAM, North Bridge, South Bridge, Graphic Card, Hard Disk, and at least three PCI slots present and labeled?", "score": 0.2}, {"question": "Is there a Memory Bus connecting the CPU and RAM via the North Bridge, and is it labeled?", "score": 0.15}, {"question": "Is there an AGP Bus connecting the North Bridge to the Graphic Card, and is it labeled?", "score": 0.1}, {"question": "Is there a Frontside Bus connecting the CPU to the North Bridge, and is it labeled?", "score": 0.1}, {"question": "Is there a PCI Bus connecting the South Bridge to the PCI slots, and is it labeled?", "score": 0.1}, {"question": "Is there an ATA Bus connecting the South Bridge to the Hard Disk, and is it labeled?", "score": 0.1}, {"question": "Is there a System Bus that explicitly includes data, address, and control lines, and are these lines labeled?", "score": 0.15}, {"question": "Are all buses and components clearly labeled and visually distinct?", "score": 0.1}], "taxonomy": "Computer/Hardware_Architecture/Bus_Structure", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_23", "prompt": "Draw three different hardware table organizations for branch prediction in a pipelined processor. Each table should have 7 slots (numbered 0 to 6) and columns for 'Valid' and 'Branch address/tag'. The first table should include a 'Branch/no branch' column. The second table should include a 'Prediction bits' column (for a 2-bit branch history). The third table should include both 'Prediction bits' and 'Target address' columns. Clearly label each table as (a), (b), and (c).", "image_path": "Computer_Science/Computer_Science_23.png", "scoring_points": [{"question": "Are there three separate tables labeled (a), (b), and (c)?", "score": 0.1}, {"question": "Does each table have 7 slots numbered 0 to 6?", "score": 0.1}, {"question": "Does each table have columns for 'Valid' and 'Branch address/tag'?", "score": 0.1}, {"question": "Does table (a) include a 'Branch/no branch' column?", "score": 0.15}, {"question": "Does table (b) include a 'Prediction bits' column for 2-bit branch history?", "score": 0.15}, {"question": "Does table (c) include both 'Prediction bits' and 'Target address' columns?", "score": 0.2}, {"question": "Are the column headers in each table correctly labeled as specified in the prompt?", "score": 0.2}], "taxonomy": "Computer/Hardware_Architecture/Pipeline", "img_type": "other", "difficulty": "hard"}
{"id": "Computer_Science_73", "prompt": "Draw a rooted tree with the root labeled 'P'. Node 'P' has two children: 'Q' (left) and 'R' (right). Node 'Q' has one child 'S' (left). Node 'R' has three children: 'T' (left), 'U' (middle), and 'V' (right). Node 'T' has no children. Node 'U' has one child 'W' (downward). Node 'V' has no children. Arrange the nodes and edges to clearly show the hierarchical structure.", "image_path": "Computer_Science/Computer_Science_73.png", "scoring_points": [{"question": "Is the root node labeled 'P'?", "score": 0.1}, {"question": "Does 'P' have two children: 'Q' on the left and 'R' on the right?", "score": 0.15}, {"question": "Does 'Q' have one child 'S' as its left child?", "score": 0.1}, {"question": "Does 'R' have three children: 'T' (left), 'U' (middle), and 'V' (right)?", "score": 0.2}, {"question": "Does 'U' have one child 'W' as its downward child?", "score": 0.15}, {"question": "Are nodes 'T', 'V', and 'W' leaves with no children?", "score": 0.1}, {"question": "Is the hierarchical structure of the tree clearly shown with correct parent-child relationships?", "score": 0.2}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Traversal", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_31", "prompt": "Draw a block diagram illustrating the process of a read operation in a direct-mapped cache architecture. The diagram should show how a memory address is divided into tag, line number, and block offset fields, how the line number is used to select a cache line via multiplexers, how the tag from the selected cache line is compared with the tag from the address using a comparator, and how the result of the comparison determines a cache hit or miss. Clearly label all components and data flows.", "image_path": "Computer_Science/Computer_Science_31.png", "scoring_points": [{"question": "Is the memory address explicitly split into three fields: Tag, Line Index (line number), and Block Offset?", "score": 0.12}, {"question": "Does the cache memory appear as multiple lines with exactly one line selected by the Line Index?", "score": 0.25}, {"question": "Is there a multiplexer/selector that forwards the selected line’s stored tag toward the comparator?", "score": 0.16}, {"question": "Does a comparator compare the request Tag with the stored tag from the selected line?", "score": 0.27}, {"question": "Is there a clear hit/miss Result output derived from the comparator?", "score": 0.1}, {"question": "Are arrows showing signal flow from address fields to selector/MUX, then to comparator, then to Result?", "score": 0.1}], "taxonomy": "Computer/Hardware_Architecture/Cache", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_4", "prompt": "Draw a comparative diagram illustrating the four main sampling methods used in statistics and machine learning: simple random sampling, systematic sampling, stratified sampling, and cluster sampling. For each method, visually represent a population of individuals and clearly indicate how samples are selected according to each method. Label each quadrant with the corresponding sampling method name.", "image_path": "Computer_Science/Computer_Science_4.png", "scoring_points": [{"question": "Does the image contain four distinct quadrants, each representing a different sampling method?", "score": 0.1}, {"question": "Is there a labeled quadrant for 'Simple random sampling' showing individuals selected randomly from the population?", "score": 0.2}, {"question": "Is there a labeled quadrant for 'Systematic sampling' showing individuals selected at regular intervals?", "score": 0.2}, {"question": "Is there a labeled quadrant for 'Stratified sampling' showing the population divided into subgroups (strata) with samples taken from each stratum?", "score": 0.2}, {"question": "Is there a labeled quadrant for 'Cluster sampling' showing the population divided into clusters with entire clusters selected as samples?", "score": 0.2}, {"question": "Are the selection processes for each sampling method visually distinct and accurately represented?", "score": 0.1}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/Sampling_Methods", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_102", "prompt": "Draw a schematic diagram of a typical process address space layout in a modern operating system, labeling and ordering the following memory segments from lowest to highest address: Text (executable code), Data (initialized static variables), BSS (uninitialized static variables), Heap (for dynamic memory allocation), and Stack (for function calls and local variables). Indicate the growth direction of both the heap and the stack.", "image_path": "Computer_Science/Computer_Science_102.png", "scoring_points": [{"question": "Are the five segments present as distinct, clearly labeled regions: Text (code), Data (initialized), BSS (uninitialized), Heap, and Stack?", "score": 0.215}, {"question": "Is it clear which direction corresponds to increasing addresses (from lowest to highest) in the diagram, either via an axis/arrow or an unambiguous layout?", "score": 0.07}, {"question": "Are the segments ordered from lowest to highest address as: Text, then Data, then BSS, then Heap, then Stack?", "score": 0.415}, {"question": "Is the heap growth direction shown toward higher addresses?", "score": 0.15}, {"question": "Is the stack growth direction shown toward lower addresses?", "score": 0.15}], "taxonomy": "Computer/Networking_and_Systems/Operating_System/Memory_Paging", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_59", "prompt": "Draw an undirected graph with 8 vertices labeled a, b, c, d, e, f, g, and h, such that: (1) vertices a, b, c, and d form a quadrilateral with all possible edges between them except for the edge between a and d; (2) vertices e, f, g, and h form another quadrilateral with all possible edges between them except for the edge between e and h; (3) vertex b is connected to vertex g by a single edge.", "image_path": "Computer_Science/Computer_Science_59.png", "scoring_points": [{"question": "Are there exactly 8 vertices labeled a, b, c, d, e, f, g, and h?", "score": 0.1}, {"question": "Do vertices a, b, c, and d form a quadrilateral missing only the edge ad?", "score": 0.15}, {"question": "Do vertices e, f, g, and h form a quadrilateral missing only the edge eh?", "score": 0.15}, {"question": "Is there an edge connecting vertex b to vertex g?", "score": 0.2}, {"question": "Are all edges undirected (no arrows)?", "score": 0.1}, {"question": "Are there no extra edges beyond those specified in the prompt?", "score": 0.2}, {"question": "Are all vertices clearly visible and labeled a, b, c, d, e, f, g, and h?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Undirected_Graph", "img_type": "diagrams", "difficulty": "easy"}
{"id": "Computer_Science_52", "prompt": "Create a two-panel academic diagram about DFS-based topological sorting. Left panel: draw a directed acyclic graph (DAG) with six labeled vertices arranged in layers: top {D, E}, middle {C, B, F}, bottom {A}. Include exactly these edges: E→F, E→C, D→C, D→B, B→A, and A→F. Right panel: show one valid topological order by placing the same vertices on a horizontal line from left to right as E, D, C, B, A, F. On the right panel, redraw all the original edges as curved arrows that always point from an earlier vertex to a later vertex in this order. Ensure edge correspondences between panels are identical and that no cycles appear.", "image_path": "Computer_Science/Computer_Science_52.png", "scoring_points": [{"question": "Are there exactly two panels, with the left showing the original graph and the right showing a linear ordering?", "score": 0.08}, {"question": "Does the left panel contain exactly the six labeled vertices A, B, C, D, E, F arranged roughly in layers with {D, E} above {C, B, F} above {A}?", "score": 0.12}, {"question": "Are the left-panel edges exactly E→F, E→C, D→C, D→B, B→A, and A→F with no additional edges?", "score": 0.2}, {"question": "Is the graph in the left panel acyclic (no directed cycles)?", "score": 0.06}, {"question": "Does the right panel place vertices in the exact horizontal order E, D, C, B, A, F from left to right?", "score": 0.2}, {"question": "In the right panel, are all arrows directed from an earlier vertex to a later vertex in the sequence (no backward-pointing edges)?", "score": 0.14}, {"question": "Do the edges drawn on the right panel correspond one-to-one with the six edges from the left panel (same endpoints)?", "score": 0.2}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Graph_Algorithms", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_11", "prompt": "Draw a feedforward neural network diagram with four layers: the first layer contains three nodes (one bias node labeled '+1', and two input nodes labeled 'x1' and 'x2'), the second and third layers each contain three nodes (with the leftmost node in each labeled '+1' as a bias node), and the fourth layer contains a single output node. All nodes in each layer (except the bias nodes) should be fully connected to the next layer, and all bias nodes should also be connected to the next layer. Clearly indicate the direction of connections between layers.", "image_path": "Computer_Science/Computer_Science_11.png", "scoring_points": [{"question": "Does the network have four layers?", "score": 0.1}, {"question": "Is the first layer composed of one bias node labeled '+1' and two input nodes labeled 'x1' and 'x2'?", "score": 0.15}, {"question": "Do the second and third layers each have three nodes, with the leftmost node labeled '+1' as a bias node?", "score": 0.15}, {"question": "Does the fourth layer contain a single output node?", "score": 0.1}, {"question": "Are all non-bias nodes in each layer fully connected to the next layer?", "score": 0.2}, {"question": "Are all bias nodes connected to the next layer?", "score": 0.15}, {"question": "Are the directions of the connections between layers clearly indicated?", "score": 0.15}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/Neural_Networks", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_35", "prompt": "Draw a time-sequence diagram illustrating a TCP sender transmitting an initial window of 4 segments to a receiver, where the initial sender-to-receiver sequence number is 426 and each segment contains 118 bytes. The sender transmits one segment per time unit from t=1 to t=4, and the one-way delay is 7 time units. Indicate that 2 out of the 4 segments are lost in transit, and show the arrival times of the successfully delivered segments at the receiver.", "image_path": "Computer_Science/Computer_Science_35.png", "scoring_points": [{"question": "Are there two vertical time axes representing the sender and the receiver timelines?", "score": 0.08}, {"question": "Are four segments transmitted from the sender at t=1, t=2, t=3, and t=4?", "score": 0.12}, {"question": "Is the one-way propagation delay shown as 7 time units (receiver events offset by +7)?", "score": 0.34}, {"question": "Are exactly two of the four transmitted segments shown lost in transit, with the remaining two shown arriving at the receiver?", "score": 0.36}, {"question": "For each successfully delivered segment, is its arrival time at the receiver equal to its send time plus 7 time units?", "score": 0.1}], "taxonomy": "Computer/Networking_and_Systems/Computer_Networks/Packet_Structure", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_62", "prompt": "Given an undirected graph with 6 vertices labeled 0 to 5, where the edges are as follows: (0,1), (0,2), (0,3), (1,3), (2,3), (2,4), (2,5), (3,5), (4,5), draw the graph and construct its adjacency matrix. The adjacency matrix should be a 6x6 symmetric matrix with 1s indicating the presence of an edge between vertices and 0s otherwise. Do not include self-loops.", "image_path": "Computer_Science/Computer_Science_62.png", "scoring_points": [{"question": "Does the image contain a graph with 6 vertices labeled 0 to 5?", "score": 0.1}, {"question": "Are the edges (0,1), (0,2), (0,3), (1,3), (2,3), (2,4), (2,5), (3,5), (4,5) present in the graph?", "score": 0.2}, {"question": "Is the adjacency matrix a 6x6 matrix?", "score": 0.1}, {"question": "Is the adjacency matrix symmetric (i.e., for every edge (i,j), both [i][j] and [j][i] are 1)?", "score": 0.15}, {"question": "Are all diagonal entries of the adjacency matrix 0 (no self-loops)?", "score": 0.1}, {"question": "Does the adjacency matrix correctly represent the presence and absence of edges as specified?", "score": 0.25}, {"question": "Are the vertex labels on the matrix and the graph consistent?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Undirected_Graph", "img_type": "trees and graphs", "difficulty": "medium"}
{"id": "Computer_Science_21", "prompt": "Draw a stack memory diagram showing the state of the stack after three nested function calls: function A calls function B, and then function B calls function C. Each function allocates its own local variables on the stack: A allocates a1, a2, a3; B allocates b1, b2, b3, b4; and C allocates c1, c2. Clearly indicate the stack pointer (SP) and local variable pointer (LV) positions after C has been called by B, and show the order of all local variables on the stack.", "image_path": "Computer_Science/Computer_Science_21.png", "scoring_points": [{"question": "Are the stack pointer (SP) and local variable pointer (LV) clearly indicated for the stack state after C has been called by B?", "score": 0.12}, {"question": "Is B’s stack frame shown above A’s frame, with B’s local variables b1, b2, b3, and b4 grouped together in order?", "score": 0.415}, {"question": "Is C’s stack frame shown above B’s frame, with C’s local variables c1 and c2 clearly shown?", "score": 0.355}, {"question": "Is A’s stack frame with local variables a1, a2, and a3 shown beneath B’s and C’s frames in the current stack state?", "score": 0.11}], "taxonomy": "Computer/Hardware_Architecture/Pipeline", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_90", "prompt": "Draw four diagrams, each representing a different tree traversal method (DFS Postorder, DFS Preorder, DFS Inorder, and BFS) on binary trees. For each diagram, label the traversal method and show a binary tree with 5 nodes, using node values and tree structures such that the traversal order for each method is clearly illustrated, where 1 indicates the first node and 5 indicates the last node. Use text to indicate the traversal order (e.g., 'Bottom -> Top, Left -> Right' for Postorder).", "image_path": "Computer_Science/Computer_Science_90.png", "scoring_points": [{"question": "Are there four separate binary-tree diagrams corresponding to four traversal methods?", "score": 0.06}, {"question": "Does each diagram depict exactly five nodes connected in a binary-tree structure?", "score": 0.1}, {"question": "In the DFS Preorder diagram, is the root numbered 1 and do the node numbers increase by visiting root, then recursively left subtree, then right subtree (root-left-right)?", "score": 0.16}, {"question": "In the DFS Postorder diagram, is the root numbered 5 and do the node numbers increase by visiting left subtree, then right subtree, then the root (left-right-root)?", "score": 0.16}, {"question": "In the DFS Inorder diagram, do the node numbers increase by visiting the left subtree, then the root, then the right subtree (left-root-right) of the depicted tree?", "score": 0.14}, {"question": "In the BFS diagram, do the node numbers increase level by level from top to bottom, and within each level from left to right (level-order)?", "score": 0.16}, {"question": "In all diagrams, are left and right child relationships visually distinguishable?", "score": 0.06}, {"question": "In each diagram, are the traversal positions clearly indicated on the nodes using the sequence numbers 1 through 5 with no gaps or duplicates?", "score": 0.12}, {"question": "In each diagram, are edges drawn to connect parents to their children so the traversal order can be unambiguously inferred?", "score": 0.04}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Traversal", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_64", "prompt": "Draw the right Cayley digraph of the dihedral group D3 (isomorphic to S3) with generators r (rotation, order 3) and f (reflection, order 2), using two edge types: blue directed arrows for right-multiplication by r and red undirected links for right-multiplication by f. Place six vertices in two concentric triangles: outer triangle for the rotation coset {e, r, r^2} and inner triangle for {f, fr, fr^2}. The blue arrows should form two separate 3-cycles oriented clockwise: e → r → r^2 → e on the outer triangle and counterclockwise f → fr → fr^2 → f on the inner triangle. Add three short red links connecting corresponding elements e–f, r–fr^2, and r^2–fr. Keep vertices simple circular nodes; emphasize arrow directions and color coding; labels may be included but are not required.", "image_path": "Computer_Science/Computer_Science_64.png", "scoring_points": [{"question": "Are there exactly six vertices arranged as two triangles, one outer and one inner?", "score": 0.12}, {"question": "Do blue directed edges form a clockwise 3-cycle on the outer triangle (e → r → r^2 → e conceptually)?", "score": 0.2}, {"question": "Do blue directed edges form a counterclockwise 3-cycle on the inner triangle (f → fr → fr^2 → f conceptually)?", "score": 0.2}, {"question": "Are red undirected links present connecting the specific corresponding pairs between triangles: e–f, r–fr^2, and r^2–fr?", "score": 0.16}, {"question": "Are blue edges used exclusively for r-multiplication and visually distinct from red edges (color coding preserved)?", "score": 0.12}, {"question": "Is each vertex incident to exactly one incoming and one outgoing blue edge (consistent with order 3 action)?", "score": 0.12}, {"question": "Are the red links undirected (or bidirectional) reflecting f being its own inverse?", "score": 0.08}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Directed_Graph", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_67", "prompt": "Draw a directed acyclic graph (DAG) with six vertices labeled a, b, c, d, e, and f, and the following directed edges: a→b, a→e, b→c, c→d, c→f, e→f, and f→d. Arrange the vertices and edges clearly to show the direction of each edge.", "image_path": "Computer_Science/Computer_Science_67.png", "scoring_points": [{"question": "Are there exactly six vertices labeled a, b, c, d, e, and f?", "score": 0.15}, {"question": "Is there a directed edge from a to b?", "score": 0.1}, {"question": "Is there a directed edge from a to e?", "score": 0.1}, {"question": "Is there a directed edge from b to c?", "score": 0.1}, {"question": "Is there a directed edge from c to d?", "score": 0.1}, {"question": "Is there a directed edge from c to f?", "score": 0.1}, {"question": "Is there a directed edge from e to f?", "score": 0.1}, {"question": "Is there a directed edge from f to d?", "score": 0.1}, {"question": "Is the graph acyclic (contains no directed cycles)?", "score": 0.15}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Directed_Graph", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_26", "prompt": "Draw the circuit symbols and corresponding truth tables for the five basic logic gates: NOT, NAND, OR, AND, and NOR. Arrange each gate with its symbol above and its truth table below, labeling the inputs as A and B (for two-input gates) or A (for single-input gates), and the output as X. Ensure the truth tables accurately reflect the logical operation of each gate.", "image_path": "Computer_Science/Computer_Science_26.png", "scoring_points": [{"question": "Are there five distinct logic gate symbols shown?", "score": 0.1}, {"question": "Is the NOT gate symbol present with a single input and correct truth table?", "score": 0.15}, {"question": "Is the NAND gate symbol present with two inputs and correct truth table?", "score": 0.15}, {"question": "Is the OR gate symbol present with two inputs and correct truth table?", "score": 0.15}, {"question": "Is the AND gate symbol present with two inputs and correct truth table?", "score": 0.15}, {"question": "Is the NOR gate symbol present with two inputs and correct truth table?", "score": 0.15}, {"question": "Are the inputs labeled as A and B (or just A for NOT), and the output as X for all gates?", "score": 0.15}], "taxonomy": "Computer/Hardware_Architecture/Digital_Circuits/Logic_Gates", "img_type": "diagrams", "difficulty": "easy"}
{"id": "Computer_Science_2", "prompt": "Draw a block diagram for a C++ program illustrating variable scope. The diagram should show nested blocks labeled B1, B2, B3, and B4, with variable declarations for 'int a' and 'int b' at different block levels. Indicate the scope of each variable by placing their declarations inside the appropriate blocks, and include 'cout' statements in each block to output the values of 'a' and 'b'.", "image_path": "Computer_Science/Computer_Science_2.png", "scoring_points": [{"question": "Are there four nested blocks labeled B1, B2, B3, and B4?", "score": 0.15}, {"question": "Is 'int a' declared inside one of the blocks (B1–B4)?", "score": 0.15}, {"question": "Is 'int b' declared in a block at a different nesting level than where 'int a' is declared to illustrate differing scopes?", "score": 0.15}, {"question": "Are the variable declarations placed inside the correct blocks according to C++ scoping rules?", "score": 0.2}, {"question": "Are 'cout' statements present in each block to output the values of 'a' and 'b'?", "score": 0.15}, {"question": "Does the diagram visually indicate the scope of each variable within the nested blocks?", "score": 0.2}], "taxonomy": "Computer/Theory_and_AI/Compiler_Principles", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_18", "prompt": "Draw the state transition diagram of a deterministic finite automaton (DFA) with five states, labeled 1 through 5, where state 1 is the initial state and state 5 is the only accepting state. The alphabet is {a, b}. The transitions are as follows: from state 1, 'a' leads to state 2 and 'b' leads to state 3; from state 2, 'a' leads to itself and 'b' leads to state 4; from state 3, 'a' leads to state 2 and 'b' leads to itself; from state 4, 'a' leads to state 2 and 'b' leads to state 5; from state 5, 'a' leads to state 2 and 'b' leads to state 3. Indicate the initial and accepting states clearly.", "image_path": "Computer_Science/Computer_Science_18.png", "scoring_points": [{"question": "Are there exactly five states labeled 1 to 5?", "score": 0.15}, {"question": "Is state 1 marked as the initial state?", "score": 0.15}, {"question": "Is state 5 marked as the only accepting state?", "score": 0.1}, {"question": "Does state 1 have transitions: 'a' to state 2, 'b' to state 3?", "score": 0.1}, {"question": "Does state 2 have transitions: 'a' to itself, 'b' to state 4?", "score": 0.1}, {"question": "Does state 3 have transitions: 'a' to state 2, 'b' to itself?", "score": 0.1}, {"question": "Does state 4 have transitions: 'a' to state 2, 'b' to state 5?", "score": 0.1}, {"question": "Does state 5 have transitions: 'a' to state 2, 'b' to state 3?", "score": 0.1}, {"question": "Are all transitions labeled with either 'a' or 'b' only?", "score": 0.1}], "taxonomy": "Computer/Theory_and_AI/Finite_Automaton", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_37", "prompt": "Plot the relationship between average queuing delay and traffic intensity (La/R) in a router buffer, where L is the packet length, a is the average packet arrival rate, and R is the transmission rate. The x-axis should represent La/R, and the y-axis should represent average queuing delay. Clearly indicate the behavior as La/R approaches 1, and show the qualitative shape of the curve.", "image_path": "Computer_Science/Computer_Science_37.png", "scoring_points": [{"question": "Is the x-axis labeled as La/R?", "score": 0.1}, {"question": "Is the y-axis labeled as average queuing delay?", "score": 0.1}, {"question": "Does the plot show a curve that increases sharply as La/R approaches 1?", "score": 0.3}, {"question": "Is there a clear indication of the behavior at La/R = 1 (e.g., asymptotic behavior or annotation) to show the delay diverges there?", "score": 0.2}, {"question": "Does the curve start near zero when La/R is near zero?", "score": 0.1}, {"question": "Is the overall shape of the curve convex and increasing?", "score": 0.2}], "taxonomy": "Computer/Networking_and_Systems/Computer_Networks/Packet_Structure", "img_type": "plots and charts", "difficulty": "hard"}
{"id": "Computer_Science_25", "prompt": "Draw a block diagram illustrating the daisy-chained bus arbitration scheme in computer architecture. The diagram should include a bus arbiter and at least three devices (labeled Device 1, Device 2, and Device m), with the bus grant (BGT) signal passing sequentially from the arbiter through each device. Also, show the bus request (BRQ) and bus acknowledge (SACK) lines connecting all devices and the arbiter. Clearly indicate the direction of each signal.", "image_path": "Computer_Science/Computer_Science_25.png", "scoring_points": [{"question": "Is there a bus arbiter block and at least three device blocks labeled Device 1, Device 2, and Device m?", "score": 0.12}, {"question": "Are all three signal lines (BGT, BRQ, SACK) shown connecting the arbiter and all devices?", "score": 0.12}, {"question": "Does the BGT (bus grant) path daisy-chain from the arbiter sequentially through the devices?", "score": 0.24}, {"question": "Do the devices tap the BGT grant line in order, with arrows indicating the grant signal direction from the arbiter through each device?", "score": 0.12}, {"question": "Is the BRQ (bus request) path shown carrying signals from the devices back to the arbiter, with arrows indicating that direction?", "score": 0.2}, {"question": "Does each device connect to the BRQ (bus request) line?", "score": 0.08}, {"question": "Is the SACK (bus acknowledge) line shown as a signal driven toward the arbiter?", "score": 0.12}], "taxonomy": "Computer/Hardware_Architecture/Bus_Structure", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_36", "prompt": "Draw a frequency spectrum diagram for ADSL (Asymmetric Digital Subscriber Line) operation, showing the allocation of frequency bands for voice, upstream, and downstream data transmission. Indicate the voice band from 0 to 25 kHz, the upstream band immediately after, and the downstream band occupying the majority of the spectrum up to 1100 kHz. Represent the downstream band as being divided into 256 channels, each 4 kHz wide, and label the key frequency boundaries and channel divisions.", "image_path": "Computer_Science/Computer_Science_36.png", "scoring_points": [{"question": "Is the diagram plotted with frequency on the horizontal axis (extending to about 1100 kHz) and power on the vertical axis?", "score": 0.1}, {"question": "Is a relatively narrow upstream band placed immediately above the voice band and before the downstream band?", "score": 0.15}, {"question": "Is the downstream band depicted as a multi-tone spectral comb that follows the upstream band and extends up to about 1100 kHz?", "score": 0.25}, {"question": "Does the downstream comb contain about 256 subcarriers (some can be omitted as long as the text clearly indicates the number 256) that are evenly spaced (≈4 kHz spacing) across its span?", "score": 0.3}, {"question": "Are the upstream and downstream bands non-overlapping, with the downstream bandwidth clearly much larger than the upstream?", "score": 0.1}, {"question": "Are the key frequency boundaries and bands clearly labeled (e.g., 0 kHz, 25 kHz voice band limit, the transitions between voice/upstream and upstream/downstream, and the ~1100 kHz upper limit), and are the downstream channel divisions indicated?", "score": 0.1}], "taxonomy": "Computer/Networking_and_Systems/Computer_Networks/Packet_Structure", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_14", "prompt": "Draw a nondeterministic finite automaton (NFA) with three states labeled 1, 2, and 3, where state 1 is the start state, state 3 is the only accepting state (double circle), and the transitions are as follows: from state 1 to state 2 on epsilon (ε), from state 2 to state 1 on 'a', from state 1 to state 3 on 'b', and from state 2 to state 3 on 'a'.", "image_path": "Computer_Science/Computer_Science_14.png", "scoring_points": [{"question": "Are there exactly three states labeled 1, 2, and 3?", "score": 0.1}, {"question": "Is state 1 marked as the start state?", "score": 0.1}, {"question": "Is state 3 marked as the only accepting state (double circle)?", "score": 0.1}, {"question": "Is there an epsilon (ε) transition from state 1 to state 2?", "score": 0.15}, {"question": "Is there a transition from state 2 to state 1 on 'a'?", "score": 0.15}, {"question": "Is there a transition from state 1 to state 3 on 'b'?", "score": 0.2}, {"question": "Is there a transition from state 2 to state 3 on 'a'?", "score": 0.2}], "taxonomy": "Computer/Theory_and_AI/Finite_Automaton", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_12", "prompt": "Illustrate, using diagrams, the effect of different learning rates (α) on the convergence behavior of gradient descent when minimizing a convex cost function J(θ₁). Include: (1) a pseudocode snippet for the gradient descent update rule for parameters θ₀ and θ₁, (2) a plot showing the iterative steps of gradient descent from a random initial value to the minimum for a single parameter θ₁, and (3) two separate plots comparing the trajectories of gradient descent for small and large learning rates, clearly indicating the difference in convergence behavior.", "image_path": "Computer_Science/Computer_Science_12.png", "scoring_points": [{"question": "Is there a pseudocode snippet showing the gradient descent update θ_j := θ_j − α ∂J/∂θ_j within an iterative loop, applied for j in {0,1}?", "score": 0.24}, {"question": "Does the cost landscape in all plots appear as a convex bowl (quadratic-like) in J versus θ1?", "score": 0.12}, {"question": "Is there a Cost vs θ1 plot with a sequence of iterates starting from a random initial θ1 and moving downhill toward the minimum?", "score": 0.12}, {"question": "Are there two separate plots comparing the trajectories of gradient descent for small and large learning rates?", "score": 0.08}, {"question": "In the small-α subplot, do the update arrows depict short steps that approach the minimum without overshooting (monotonic decrease in J)?", "score": 0.16}, {"question": "In the large-α subplot, do the update arrows overshoot the minimum and cross it multiple times, with some steps showing increased J (oscillation)?", "score": 0.28}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/Learning_Rate_Impact", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_51", "prompt": "Given the undirected, edge-weighted graph with 9 vertices and the specified edge weights, draw both the original graph and its minimum spanning tree (MST). Clearly indicate the edges included in the MST, ensure all vertices are connected, and calculate and display the total weight of the MST. The MST should be highlighted or distinguished from the original graph.", "image_path": "Computer_Science/Computer_Science_51.png", "scoring_points": [{"question": "Does the image show the original undirected, edge-weighted graph with 9 vertices and all given edge weights?", "score": 0.225}, {"question": "Are all 9 vertices of the original graph clearly shown?", "score": 0.1}, {"question": "Is the minimum spanning tree (MST) clearly distinguished from the original graph (e.g., by color or highlighting)?", "score": 0.15}, {"question": "Does the MST connect all 9 vertices without forming any cycles?", "score": 0.15}, {"question": "Are the edges included in the MST a subset of the original graph's edges?", "score": 0.1}, {"question": "Is the total weight of the MST correctly calculated and displayed?", "score": 0.275}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Graph_Algorithms", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_5", "prompt": "Draw a graph comparing the output of a linear regression model and a logistic regression model as functions of a single input variable x. On the same set of axes, plot the linear model y = b0 + b1x and the logistic model p = 1 / (1 + e^{-(b0 + b1x)}), with the vertical axis labeled y/p (ranging from 0 to 1) and the horizontal axis labeled x. Clearly indicate which curve corresponds to each model and annotate their respective equations on the plot.", "image_path": "Computer_Science/Computer_Science_5.png", "scoring_points": [{"question": "Does the image show a set of axes with the vertical axis labeled y/p (ranging from 0 to 1) and the horizontal axis labeled x?", "score": 0.1}, {"question": "Is there a straight line representing the linear model y = b0 + b1x?", "score": 0.15}, {"question": "Is there an S-shaped curve representing the logistic model p = 1 / (1 + e^{-(b0 + b1x)})?", "score": 0.25}, {"question": "Are both the linear and logistic model equations annotated on the plot?", "score": 0.25}, {"question": "Are the curves clearly labeled to indicate which is the linear model and which is the logistic model?", "score": 0.15}, {"question": "Does the logistic curve stay within the range 0 to 1 on the y/p axis?", "score": 0.1}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/Training_and_Testing_Curves", "img_type": "plots and charts", "difficulty": "hard"}
{"id": "Computer_Science_89", "prompt": "Draw a schematic diagram illustrating the address translation process in a virtualized system where both the guest OS and the virtual machine monitor (VMM) use three-level page tables. Clearly show the mapping from a guest virtual address to a guest physical address via the guest's L1, L2, and L3 page tables, and then from the guest physical address to the host physical address via the VMM's shadow L1, L2, and L3 page tables. Indicate the separation between the guest OS and the VMM, and label all page tables and physical pages accordingly.", "image_path": "Computer_Science/Computer_Science_89.png", "scoring_points": [{"question": "Does the diagram show a guest virtual address being translated through exactly three sequential guest page table levels (L1 -> L2 -> L3) before reaching a physical frame?", "score": 0.18}, {"question": "Is an explicit intermediate guest physical address (or frame) depicted as the result of the guest's three-level translation?", "score": 0.1}, {"question": "Does the diagram then translate through exactly three sequential VMM shadow page table levels (shadow L1 -> shadow L2 -> shadow L3) to reach a host physical address/frame?", "score": 0.22}, {"question": "Is there a clear visual separation or boundary indicating which components belong to the guest OS and which belong to the VMM?", "score": 0.12}, {"question": "Do directional links/arrows indicate that each L1 points to L2, each L2 points to L3, and only the L3 levels (both guest and VMM) map to a physical frame/page rather than another table?", "score": 0.2}, {"question": "Is a host physical page/frame explicitly depicted as the final destination of the VMM translation?", "score": 0.08}, {"question": "Are the end-to-end flows unambiguous and ordered as: guest virtual address -> guest L1 -> guest L2 -> guest L3 -> guest physical address, then guest physical address -> shadow L1 -> shadow L2 -> shadow L3 -> host physical address?", "score": 0.1}], "taxonomy": "Computer/Hardware_Architecture/Cache", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_60", "prompt": "Draw an undirected weighted graph with 7 vertices labeled A, B, C, D, E, F, and G. Connect the vertices with edges as follows, and label each edge with its corresponding weight: AB (3), AC (not present), AD (not present), AE (not present), AF (6), AG (4), BC (2), BD (not present), BE (not present), BF (not present), BG (3), CD (10), CE (not present), CF (not present), CG (6), DE (10), DF (not present), DG (5), EF (7), EG (9), FG (8). Ensure the graph is clearly drawn with all edge weights visible.", "image_path": "Computer_Science/Computer_Science_60.png", "scoring_points": [{"question": "Are there exactly 7 vertices labeled A, B, C, D, E, F, and G?", "score": 0.1}, {"question": "Are all the following edges present and correctly labeled: AB (3), AF (6), AG (4), BC (2), BG (3), CG (6), CD (10), DG (5), DE (10), EG (9), FG (8), EF (7)?", "score": 0.5}, {"question": "Are there no extra edges not listed in the prompt?", "score": 0.2}, {"question": "Are all edge weights clearly visible and correctly placed next to their respective edges?", "score": 0.2}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Undirected_Graph", "img_type": "trees and graphs", "difficulty": "medium"}
{"id": "Computer_Science_97", "prompt": "Draw a network topology diagram that includes three routers (R1, R2, R3), a switch, a hub, four hosts (H1-H4), a DNS server, and an Internet web server. The routers should be connected such that R1 and R3 are each connected to R2, and R2 connects to a switch, which then connects to H1 and H2. The switch also connects to a hub, which connects to H3, and H4. Assign the following IP addresses: R1 (201.1.3.9), R2 (201.1.3.1 on L1, NAT on L0, E0 to 201.1.1.0/24), R3 (201.1.2.0/25), H1 (192.168.3.2), H2 (192.168.3.3), H3 (192.168.3.251), H4 (192.168.3.252), DNS server (201.1.1.1), and Internet server (130.18.10.1). Indicate that the default DNS for H1-H4 is 201.1.1.1. Label all devices and network segments appropriately.", "image_path": "Computer_Science/Computer_Science_97.png", "scoring_points": [{"question": "Are all specified devices present with correct counts (routers R1–R3, one switch, one hub, hosts H1–H4, one DNS server, and one Internet web server)?", "score": 0.08}, {"question": "Are R1 and R3 each directly connected to R2 (with no direct R1–R3 link)?", "score": 0.1}, {"question": "Does R2 connect to a switch, and does that switch connect to H1 and H2?", "score": 0.06}, {"question": "Does the switch connect to a hub, and does the hub connect to H3, and H4?", "score": 0.1}, {"question": "Is R2’s E0 interface connected to a 201.1.1.0/24 network segment that includes the DNS server?", "score": 0.12}, {"question": "Is the Internet web server shown as external (beyond R2) with IP 130.18.10.1?", "score": 0.06}, {"question": "Are the router assignments correct: R1 has IP 201.1.3.9, R2 L1 has IP 201.1.3.1, and R3 is associated with the 201.1.2.0/25 network segment as specified?", "score": 0.16}, {"question": "Is R2’s L0 interface indicated as performing NAT?", "score": 0.1}, {"question": "Are the host IP assignments correct: H1 = 192.168.3.2, H2 = 192.168.3.3, H3 = 192.168.3.251, H4 = 192.168.3.252?", "score": 0.16}, {"question": "Is the DNS server set to 201.1.1.1 and shown as the default DNS for H1–H4?", "score": 0.06}], "taxonomy": "Computer/Networking_and_Systems/Computer_Networks/Topology", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_33", "prompt": "Draw a diagram illustrating the alternating sequence of CPU bursts and I/O bursts for a single process in an operating system. Label at least three CPU bursts (showing typical CPU instructions such as 'load', 'store', 'add', 'increment', 'read from file', 'write to file') and at least three I/O bursts (labeled as 'wait for I/O'). Clearly indicate the transitions between CPU and I/O bursts, and group each segment accordingly.", "image_path": "Computer_Science/Computer_Science_33.png", "scoring_points": [{"question": "Does the image show an alternating sequence of CPU bursts and I/O bursts for a single process?", "score": 0.15}, {"question": "Are at least three CPU bursts present and labeled with typical CPU instructions (e.g., 'load', 'store', 'add', 'increment', 'read from file', 'write to file')?", "score": 0.25}, {"question": "Are at least three I/O bursts present and labeled as 'wait for I/O'?", "score": 0.25}, {"question": "Are the transitions between CPU bursts and I/O bursts clearly indicated?", "score": 0.15}, {"question": "Are the CPU bursts and I/O bursts visually grouped and labeled accordingly?", "score": 0.2}], "taxonomy": "Computer/Networking_and_Systems/Operating_System/Process_Scheduling", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_48", "prompt": "Draw a directed flow network with 6 nodes labeled 1 through 6. Add directed edges with the following capacities: from node 1 to node 2 (capacity 7), from node 1 to node 3 (capacity 3), from node 2 to node 3 (capacity 1), from node 2 to node 4 (capacity 6), from node 3 to node 4 (capacity 3), from node 3 to node 5 (capacity 8), from node 4 to node 6 (capacity 2), from node 5 to node 4 (capacity 2), and from node 5 to node 6 (capacity 8). Clearly indicate the direction and capacity of each edge.", "image_path": "Computer_Science/Computer_Science_48.png", "scoring_points": [{"question": "Are there exactly 6 nodes labeled 1 to 6?", "score": 0.1}, {"question": "Are all edges directed?", "score": 0.1}, {"question": "Is there an edge from node 1 to node 2 with capacity 7?", "score": 0.1}, {"question": "Is there an edge from node 1 to node 3 with capacity 3?", "score": 0.1}, {"question": "Is there an edge from node 2 to node 3 with capacity 1?", "score": 0.1}, {"question": "Is there an edge from node 2 to node 4 with capacity 6?", "score": 0.1}, {"question": "Is there an edge from node 3 to node 4 with capacity 3?", "score": 0.1}, {"question": "Is there an edge from node 3 to node 5 with capacity 8?", "score": 0.1}, {"question": "Is there an edge from node 4 to node 6 with capacity 2?", "score": 0.1}, {"question": "Is there an edge from node 5 to node 4 with capacity 2?", "score": 0.05}, {"question": "Is there an edge from node 5 to node 6 with capacity 8?", "score": 0.05}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Maximum_Flow", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_81", "prompt": "Draw a binary search tree with the following properties: (1) The root node has value 11. (2) The tree is colored as a red-black tree, with red and black nodes, and satisfies all red-black tree properties. (3) The left subtree of the root contains nodes with values 7, 2, 1, 5, 4, and 8, arranged according to binary search tree rules. (4) The right subtree of the root contains nodes with values 17, 14, 12, 16, 15, 20, 18, and 21, arranged according to binary search tree rules. (5) The coloring of the nodes is as follows: nodes 2, 4, 16, and 17 are red; all other nodes are black.", "image_path": "Computer_Science/Computer_Science_81.png", "scoring_points": [{"question": "Is the root node labeled 11?", "score": 0.1}, {"question": "Are the left and right subtrees arranged according to binary search tree rules?", "score": 0.2}, {"question": "Are the nodes 2, 4, 16, and 17 colored red, and all other nodes black?", "score": 0.2}, {"question": "Are all red-black tree properties satisfied: root is black, no two consecutive red nodes, same number of black nodes (3) on all paths from root to leaves?", "score": 0.3}, {"question": "Are all specified node values present and correctly placed in the tree?", "score": 0.2}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Search_Tree", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_61", "prompt": "Draw three undirected graphs side by side: (1) G1, a complete bipartite graph K_{3,3} with vertices labeled x1, x2, x3 in one part and x4, x5, x6 in the other, with all possible edges between the two parts; (2) G2, a simple cycle graph C6 with six vertices labeled y1 through y6 arranged in a regular hexagon, each connected to its two neighbors; (3) G3, a tree with five vertices labeled w1 through w5, where w1 is connected to w2 and w3, and w3 is connected to w4 and w5.", "image_path": "Computer_Science/Computer_Science_61.png", "scoring_points": [{"question": "Are there three separate undirected graphs drawn side by side?", "score": 0.1}, {"question": "Is the first graph (G1) a complete bipartite graph K_{3,3} with vertices labeled x1, x2, x3 and x4, x5, x6, and all possible edges between the two parts?", "score": 0.25}, {"question": "Is the second graph (G2) a simple cycle with six vertices labeled y1 to y6, arranged in a regular hexagon, each connected to its two neighbors?", "score": 0.25}, {"question": "Is the third graph (G3) a tree with five vertices labeled w1 to w5, where w1 is connected to w2 and w3, and w3 is connected to w4 and w5?", "score": 0.25}, {"question": "Are all vertex labels (x1-x6, y1-y6, w1-w5) correctly placed and matched to their respective graphs?", "score": 0.15}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Undirected_Graph", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_96", "prompt": "Draw a graph showing the effect of different learning rates on the loss during training with gradient descent. The x-axis should represent epochs and the y-axis should represent loss. Include and label four curves: one for a very high learning rate (showing divergence), one for a high learning rate (showing slow or oscillating convergence), one for a low learning rate (showing slow but steady decrease), and one for a good learning rate (showing fast and smooth convergence). Each curve should be clearly labeled with its corresponding learning rate description.", "image_path": "Computer_Science/Computer_Science_96.png", "scoring_points": [{"question": "Does the figure present a 2D plot with horizontal and vertical axes suitable for showing epochs versus loss over training?", "score": 0.08}, {"question": "Do the plotted curves progress left-to-right along the horizontal axis (representing increasing training epochs) and up-down along the vertical axis (representing loss magnitude)?", "score": 0.1}, {"question": "Are there four distinct curves shown on the same axes (i.e., four different training traces)?", "score": 0.1}, {"question": "Are the four curves clearly distinguishable and each clearly labeled with its corresponding learning rate description (optionally using different colors or line styles)?", "score": 0.07}, {"question": "Does one curve exhibit divergence characteristic of a very high learning rate (loss grows or explodes, or oscillates with increasing amplitude without trending downward)?", "score": 0.18}, {"question": "Does one curve represent a high learning rate that shows oscillatory or poorly damped behavior (loss fluctuates around the optimum with slow or inconsistent decrease)?", "score": 0.15}, {"question": "Does one curve represent a low learning rate that decreases the loss slowly and steadily (approximately monotonic decrease with small step-to-step changes)?", "score": 0.13}, {"question": "Does one curve represent a good learning rate that shows fast and smooth convergence (rapid initial loss drop followed by a smooth approach toward a low plateau)?", "score": 0.14}, {"question": "Among the convergent curves, is the good-learning-rate curve the fastest to reach a low loss compared to the low- and high-learning-rate curves?", "score": 0.05}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/Learning_Rate_Impact", "img_type": "plots and charts", "difficulty": "hard"}
{"id": "Computer_Science_92", "prompt": "Draw a comparative diagram illustrating the concepts of underfitting, appropriate fitting, and overfitting in a binary classification problem. For each case, plot a two-dimensional scatter plot with two classes (distinguishable by different markers or colors), and show the decision boundary learned by a model: (1) a linear boundary for underfitting, (2) a smooth nonlinear boundary for appropriate fitting, and (3) a highly complex, wiggly boundary for overfitting. Label each subplot accordingly.", "image_path": "Computer_Science/Computer_Science_92.png", "scoring_points": [{"question": "Are there three separate subplots arranged for comparison?", "score": 0.08}, {"question": "Does each subplot contain a two-dimensional scatter of data points?", "score": 0.08}, {"question": "Are exactly two classes shown with clearly distinguishable markers or colors in each subplot?", "score": 0.12}, {"question": "In the underfitting subplot, is the decision boundary a straight linear line?", "score": 0.12}, {"question": "In the appropriate-fitting subplot, is the decision boundary smooth and nonlinear (gently curved with low complexity)?", "score": 0.22}, {"question": "In the overfitting subplot, is the decision boundary highly complex and wiggly with many bends?", "score": 0.26}, {"question": "Does the complexity of the decision boundary increase from underfitting to appropriate-fitting to overfitting?", "score": 0.12}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/Overfitting_and_Underfitting_Diagram", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_15", "prompt": "Construct a Non-deterministic Finite Automaton (NFA) with epsilon (ε) transitions that recognizes the language defined by the regular expression (a|b)*ac. Clearly indicate all states, transitions (including ε-transitions), the initial state, and the accepting state. The automaton should explicitly show how the (a|b)* part is handled using ε-transitions, and how the sequence 'a' followed by 'c' leads to acceptance.", "image_path": "Computer_Science/Computer_Science_15.png", "scoring_points": [{"question": "Does the NFA have an initial state and at least one accepting state clearly indicated?", "score": 0.1}, {"question": "Are there ε-transitions used to implement the (a|b)* part of the regular expression?", "score": 0.15}, {"question": "Are there transitions labeled 'a' and 'b' corresponding to the (a|b) part?", "score": 0.1}, {"question": "Does the automaton allow for zero or more repetitions of 'a' or 'b' before the 'ac' sequence?", "score": 0.15}, {"question": "Is there a transition labeled 'a' after the (a|b)* part, leading towards acceptance?", "score": 0.15}, {"question": "Is there a transition labeled 'c' immediately after the 'a', leading to the accepting state?", "score": 0.15}, {"question": "Are all transitions and states necessary for recognizing (a|b)*ac present and correctly connected?", "score": 0.2}], "taxonomy": "Computer/Theory_and_AI/Finite_Automaton", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_38", "prompt": "Draw a comparative diagram illustrating the sequence of message exchanges for both iterative and recursive DNS queries when a user at cse.nyu.edu requests the IP address of gaia.cs.umass.edu. Clearly show the roles and interactions among the requesting host, local DNS server (dns.nyu.edu), root DNS server, TLD DNS server, and authoritative DNS server (dns.umass.edu). Indicate the direction and order of each message in both query types.", "image_path": "Computer_Science/Computer_Science_38.png", "scoring_points": [{"question": "Does the image show both iterative and recursive DNS query processes for comparison within the same diagram?", "score": 0.1}, {"question": "Are the following entities present and labeled: requesting host (cse.nyu.edu), local DNS server (dns.nyu.edu), root DNS server, TLD DNS server, and authoritative DNS server (dns.umass.edu)?", "score": 0.15}, {"question": "Are the message flows for the iterative query correctly shown, with the local DNS server contacting each DNS server in turn and responses being sent back at each step?", "score": 0.2}, {"question": "Are the message flows for the recursive query correctly shown, with the local DNS server forwarding the query and each DNS server forwarding the request until the authoritative server is reached, then responses propagating back?", "score": 0.2}, {"question": "Are the directions and order of each message clearly indicated (e.g., with arrows and step numbers) for both query types?", "score": 0.15}, {"question": "Is the final response from the authoritative DNS server returned to the requesting host in both cases?", "score": 0.1}, {"question": "Is the distinction between iterative and recursive query processes visually clear (e.g., by separation or labeling)?", "score": 0.1}], "taxonomy": "Computer/Networking_and_Systems/Computer_Networks/TCP_and_IP_Protocol_Stack", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_94", "prompt": "Draw four different standard digital circuit symbols, each representing a different type of buffer: (a) a tri-state buffer with labeled 'Data in', 'Data out', and 'Control' lines; (b) a simple wire connection; (c) a single-pole single-throw (SPST) switch; and (d) an inverting buffer (NOT gate with enable), with all symbols clearly labeled with letters (a), (b), (c), and (d) below each symbol.", "image_path": "Computer_Science/Computer_Science_94.png", "scoring_points": [{"question": "Are there four separate and non-overlapping symbols depicted?", "score": 0.08}, {"question": "Does one symbol correctly represent a tri-state buffer with three distinct terminals: a data input, a data output, and a separate control/enable pin?", "score": 0.18}, {"question": "In the tri-state buffer symbol, is the signal flow indicated from input to output through a buffer shape (e.g., triangle) with the control pin entering separately (not in series with the data path)?", "score": 0.14}, {"question": "Does one symbol correctly represent a simple wire connection as a straight conductive line linking two nodes without any gate or active element?", "score": 0.12}, {"question": "Does one symbol correctly represent an SPST switch with a single pole and a single throw, showing an open/closed contact mechanism between two nodes?", "score": 0.16}, {"question": "Does one symbol correctly represent an inverting buffer (NOT) with an enable, i.e., a triangle with an inversion bubble at the output and a separate enable/control pin?", "score": 0.2}, {"question": "Are the four symbols clearly distinct from each other in form and function (buffer vs. wire vs. switch vs. inverting buffer with enable)?", "score": 0.12}], "taxonomy": "Computer/Hardware_Architecture/Digital_Circuits/Logic_Gates", "img_type": "diagrams", "difficulty": "medium"}
{"id": "Computer_Science_88", "prompt": "Draw a 2x2 grid of target diagrams to illustrate the bias-variance tradeoff in machine learning. Each subplot should be a bullseye target with a red center, and blue dots representing predictions. The columns should be labeled 'Low Variance' and 'High Variance', and the rows labeled 'Low Bias' and 'High Bias'. In each subplot, arrange the blue dots to visually represent the corresponding combination of bias and variance.", "image_path": "Computer_Science/Computer_Science_88.png", "scoring_points": [{"question": "Is the figure organized as a 2x2 grid of four separate subplots?", "score": 0.1}, {"question": "Does each subplot contain a bullseye-style target with a red center?", "score": 0.15}, {"question": "Are predictions depicted as blue dots (points) in all subplots?", "score": 0.1}, {"question": "In the top-left subplot, are the blue dots tightly clustered around the red center (low bias, low variance)?", "score": 0.15}, {"question": "In the top-right subplot, are the blue dots widely dispersed but centered on the red center overall (low bias, high variance)?", "score": 0.15}, {"question": "In the bottom-left subplot, are the blue dots tightly clustered but offset from the red center (high bias, low variance)?", "score": 0.15}, {"question": "In the bottom-right subplot, are the blue dots widely dispersed and their average location offset from the red center (high bias, high variance)?", "score": 0.15}, {"question": "Across the grid, does variance increase from left (tight clusters) to right (dispersed dots) and bias increase from top (centered on target) to bottom (offset from target)?", "score": 0.05}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/Variance_Bias_Tradeoff", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_10", "prompt": "Draw a single-layer perceptron (artificial neuron) diagram that takes two binary inputs, x1 and x2, and a bias input of +1. Assign weights of 20 to both x1 and x2, and a weight of -30 to the bias input. Show all weights on the connections and indicate the output as h_θ(x).", "image_path": "Computer_Science/Computer_Science_10.png", "scoring_points": [{"question": "Does the diagram show a single neuron with three input arrows?", "score": 0.1}, {"question": "Are the inputs labeled as x1, x2, and +1 (bias)?", "score": 0.15}, {"question": "Is the weight from x1 to the neuron labeled as 20?", "score": 0.15}, {"question": "Is the weight from x2 to the neuron labeled as 20?", "score": 0.15}, {"question": "Is the weight from the bias (+1) to the neuron labeled as -30?", "score": 0.15}, {"question": "Is the output of the neuron labeled as h_θ(x)?", "score": 0.15}, {"question": "Are all weights and labels clearly visible and correctly placed on the diagram?", "score": 0.15}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/Neural_Networks", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_19", "prompt": "Draw a deterministic finite automaton (DFA) with 10 states (numbered 0 to 9), where state 0 is the start state. The transitions are as follows: from state 0, 'h' leads to 1 and 's' leads to 7; from 1, 'e' leads to 2 and 'i' leads to 5; from 2, 'r' leads to 3; from 3, 's' leads to 4; from 5, 's' leads to 6; from 7, 'h' leads to 8; from 8, 'e' leads to 9. States 4, 6, and 9 are accepting states. Draw all transitions and clearly indicate start and accepting states.", "image_path": "Computer_Science/Computer_Science_19.png", "scoring_points": [{"question": "Are there exactly 10 states, numbered 0 to 9?", "score": 0.2}, {"question": "Is state 0 marked as the start state?", "score": 0.1}, {"question": "Are states 4, 6, and 9 marked as accepting states?", "score": 0.25}, {"question": "Is there a transition from 0 to 1 on 'h'?", "score": 0.05}, {"question": "Is there a transition from 0 to 7 on 's'?", "score": 0.05}, {"question": "Is there a transition from 1 to 2 on 'e'?", "score": 0.05}, {"question": "Is there a transition from 1 to 5 on 'i'?", "score": 0.05}, {"question": "Is there a transition from 2 to 3 on 'r'?", "score": 0.05}, {"question": "Is there a transition from 3 to 4 on 's'?", "score": 0.05}, {"question": "Is there a transition from 5 to 6 on 's'?", "score": 0.05}, {"question": "Is there a transition from 7 to 8 on 'h'?", "score": 0.05}, {"question": "Is there a transition from 8 to 9 on 'e'?", "score": 0.05}], "taxonomy": "Computer/Theory_and_AI/Finite_Automaton", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_84", "prompt": "Create a single comparative diagram with three side-by-side binary trees (left to right): a Binary Search Tree, an AVL tree, and a Red-Black tree. Draw nodes as circles and edges as straight lines. Use colors: left tree nodes light orange, middle tree nodes light cyan, right tree uses black/gray for black nodes and red for red nodes. Structures: (1) BST: root 8; left child 3 with children 1 (left) and 6 (right); right child 10 with right child 14. (2) AVL: root 12; left child 8 with children 5 (left) and 11 (right); node 5 has left child 4; right child 18 with left child 17. Ensure AVL nodes are height-balanced (balance factors in −1..1). (3) Red-Black: root 7 (black); left child 3 (black); right child 18 (red) with children 10 (black, left) and 22 (black, right); node 10 has children 8 (red, left) and 11 (red, right); node 22 has right child 26 (red). Ensure red-black properties: root black, no red-red parent-child, equal black-height on all root-to-leaf paths.", "image_path": "Computer_Science/Computer_Science_84.png", "scoring_points": [{"question": "Are there three side-by-side binary trees with circular nodes and straight-line edges?", "score": 0.07}, {"question": "Does the leftmost tree have the exact BST structure: root 8; left 3 with children 1 and 6; right 10 with right 14, with nodes colored light orange?", "score": 0.18}, {"question": "Does the leftmost tree satisfy the BST ordering property for all parent-child relations?", "score": 0.08}, {"question": "Does the middle tree have the exact AVL structure: root 12; left 8 with children 5 (left) and 11 (right) where 5 has left 4; right 18 with left 17, with nodes colored light cyan?", "score": 0.18}, {"question": "Is the middle tree height-balanced with balance factors in {-1, 0, 1} at every node?", "score": 0.12}, {"question": "Does the rightmost tree have the exact structure: root 7; left 3; right 18 with left 10 and right 22; 10 has children 8 and 11; 22 has right 26?", "score": 0.15}, {"question": "In the rightmost tree, are node colors assigned: 7 black, 3 black, 18 red, 10 black, 22 black, 8 red, 11 red, 26 red?", "score": 0.12}, {"question": "Does the rightmost tree satisfy red-black constraints: black root, no red node has a red child, and equal black-height on all root-to-leaf paths?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Search_Tree", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_34", "prompt": "Draw a resource allocation graph for an operating system scenario where there are two processes (Process 1 and Process 2) and two resources (Resource 1 and Resource 2). Process 1 is assigned to Resource 1 and is waiting for Resource 2, while Process 2 is assigned to Resource 2 and is waiting for Resource 1. Clearly indicate the direction of assignment and waiting relationships, and label the deadlock state in the diagram.", "image_path": "Computer_Science/Computer_Science_34.png", "scoring_points": [{"question": "Are there exactly two processes and two resources shown in the diagram?", "score": 0.1}, {"question": "Is Process 1 assigned to Resource 1?", "score": 0.1}, {"question": "Is Process 1 waiting for Resource 2?", "score": 0.15}, {"question": "Is Process 2 assigned to Resource 2?", "score": 0.1}, {"question": "Is Process 2 waiting for Resource 1?", "score": 0.15}, {"question": "Are the assignment and waiting relationships clearly indicated with arrows in the correct directions?", "score": 0.2}, {"question": "Is the deadlock state explicitly labeled in the diagram?", "score": 0.2}], "taxonomy": "Computer/Networking_and_Systems/Operating_System/Deadlock_Resource_Allocation_Diagram", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_57", "prompt": "Draw the complete bipartite graph K_{3,3}, labeling the vertices in each partition as 1, 2, 3 and 4, 5, 6, and connect every vertex in the first partition to every vertex in the second partition with edges. Do not include any edges within the same partition.", "image_path": "Computer_Science/Computer_Science_57.png", "scoring_points": [{"question": "Are there exactly 6 vertices labeled 1 to 6?", "score": 0.1}, {"question": "Are the vertices divided into two partitions: {1,2,3} and {4,5,6}?", "score": 0.2}, {"question": "Are there edges connecting every vertex in {1,2,3} to every vertex in {4,5,6}?", "score": 0.3}, {"question": "Are there no edges between vertices within the same partition?", "score": 0.2}, {"question": "Is the graph undirected?", "score": 0.2}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Undirected_Graph", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_100", "prompt": "Draw two digital logic circuits: one that implements the Boolean function AB + AC and another that implements the function A(B + C). For each circuit, provide the corresponding truth table showing all possible values of inputs A, B, and C, and the resulting output for each function. Clearly label the logic gates and the columns in the truth tables.", "image_path": "Computer_Science/Computer_Science_100.png", "scoring_points": [{"question": "Are there two distinct digital logic circuits shown, one for AB + AC and one for A(B + C)?", "score": 0.05}, {"question": "Does the AB + AC circuit implement two separate AND gates for AB and AC whose outputs feed into a single OR gate?", "score": 0.12}, {"question": "Does the A(B + C) circuit implement an OR gate combining B and C whose output feeds an AND gate with input A?", "score": 0.12}, {"question": "Are the inputs A, B, and C clearly used as primary inputs to both circuits via correct signal connections (without unintended inversions)?", "score": 0.06}, {"question": "Do the provided truth tables enumerate all 8 combinations of inputs A, B, and C (000 through 111)?", "score": 0.12}, {"question": "Does the AB + AC truth table correctly reflect the function: the output is 1 if and only if A = 1 and at least one of B or C = 1; otherwise the output is 0 (including all cases where A = 0 and the case A = 1 with B = 0 and C = 0)?", "score": 0.24}, {"question": "Does the A(B + C) truth table correctly reflect the function: the output is 1 if and only if A = 1 and at least one of B or C = 1; otherwise the output is 0 (including all cases where A = 0 and the case A = 1 with B = 0 and C = 0)?", "score": 0.24}, {"question": "Are standard logic gate types (AND and OR) depicted with correct functionality and output wiring (no unintended inversions or extra gates)?", "score": 0.05}], "taxonomy": "Computer/Hardware_Architecture/Digital_Circuits/Logic_Gates", "img_type": "diagrams", "difficulty": "easy"}
{"id": "Computer_Science_17", "prompt": "Draw the state transition diagram of a nondeterministic finite automaton (NFA) that recognizes the language described by the regular expression (a|b)*ac. Use epsilon (ε) transitions where necessary, and clearly indicate the start state and the accepting state.", "image_path": "Computer_Science/Computer_Science_17.png", "scoring_points": [{"question": "Does the automaton have a start state and a single accepting state clearly indicated?", "score": 0.1}, {"question": "Are epsilon (ε) transitions used to connect states where appropriate?", "score": 0.1}, {"question": "Does the automaton contain a substructure that allows for any number (including zero) of 'a' or 'b' before the sequence 'a'?", "score": 0.25}, {"question": "Is there a transition labeled 'a' after the (a|b)* part?", "score": 0.15}, {"question": "Is there a transition labeled 'c' immediately after the 'a' transition?", "score": 0.15}, {"question": "Does the automaton accept only strings that end with 'ac' and have any combination of 'a' and 'b' before that?", "score": 0.25}], "taxonomy": "Computer/Theory_and_AI/Finite_Automaton", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_78", "prompt": "Draw two binary trees side by side: one is a balanced binary tree and the other is an unbalanced binary tree. Both trees should have nodes labeled 0, 1, 2, 3, and 4, with the unbalanced tree containing an additional node labeled 5. For each node, indicate its balance factor d, where d = [height of left child - height of right child]. Clearly show the structure and balance factors for all nodes, and include a textual formula for the balance factor at the bottom of the image.", "image_path": "Computer_Science/Computer_Science_78.png", "scoring_points": [{"question": "Are there two binary trees shown side by side, with one being balanced and the other unbalanced?", "score": 0.1}, {"question": "Do both trees have nodes labeled 0, 1, 2, 3, and 4, with the unbalanced tree having an additional node labeled 5?", "score": 0.1}, {"question": "Are the structures of the two trees different, with the balanced tree having a more even distribution of nodes and the unbalanced tree having a longer branch?", "score": 0.2}, {"question": "Is the balance factor d shown for every node in both trees?", "score": 0.15}, {"question": "Is the balance factor for each node correctly calculated as d = [height of left child - height of right child]?", "score": 0.25}, {"question": "Is there a textual formula for the balance factor included at the bottom of the image?", "score": 0.1}, {"question": "Are the node connections (parent-child relationships) clearly indicated with arrows or lines?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Search_Tree", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_7", "prompt": "Illustrate the structure of a genetic algorithm's population using binary encoding. Depict at least four chromosomes, each represented as a sequence of binary digits (genes). Clearly distinguish and label the concepts of 'gene', 'chromosome', and 'population' using different colors or boxes. Additionally, show a crossover operation between two chromosomes at a specific gene position, using arrows and a vertical line to indicate the crossover point.", "image_path": "Computer_Science/Computer_Science_7.png", "scoring_points": [{"question": "Are chromosomes represented as sequences of binary digits (0 and 1)?", "score": 0.1}, {"question": "Does the population depict at least four chromosomes as binary sequences, grouped together and labeled as 'population'?", "score": 0.25}, {"question": "Is at least one single bit position highlighted and labeled as a 'gene'?", "score": 0.1}, {"question": "Is at least one entire binary sequence visually delineated and labeled as a 'chromosome'?", "score": 0.1}, {"question": "In the crossover section, is a one-point crossover shown with a vertical line indicating the specific crossover position along the chromosomes?", "score": 0.15}, {"question": "Are two parent chromosomes and the two resulting offspring shown for the crossover, with arrows indicating the recombination?", "score": 0.3}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/Training_and_Testing_Curves", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_13", "prompt": "Draw a deterministic finite automaton (DFA) that recognizes exactly the string 'for' over the alphabet {f, o, r}. Clearly indicate the start state, all transitions, and the accepting state.", "image_path": "Computer_Science/Computer_Science_13.png", "scoring_points": [{"question": "Is the automaton deterministic (no state has two outgoing transitions with the same symbol)?", "score": 0.1}, {"question": "Is there a unique start state?", "score": 0.1}, {"question": "Does the transition from the start state on 'f' go to the second state?", "score": 0.2}, {"question": "Does the transition from the second state on 'o' go to the third state?", "score": 0.2}, {"question": "Does the transition from the third state on 'r' go to the accepting state?", "score": 0.15}, {"question": "Is the accepting state only reachable by the sequence 'f' -> 'o' -> 'r'?", "score": 0.15}, {"question": "Is the accepting state clearly marked (e.g., double circle)?", "score": 0.1}], "taxonomy": "Computer/Theory_and_AI/Finite_Automaton", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_83", "prompt": "Draw the binary search tree that results from inserting the sequence of integers 12, 8, 18, 15, and 21, in that order, into an initially empty binary search tree. Clearly show the structure and placement of each node.", "image_path": "Computer_Science/Computer_Science_83.png", "scoring_points": [{"question": "Is the root node labeled 12?", "score": 0.1}, {"question": "Is the left child of 12 labeled 8?", "score": 0.15}, {"question": "Is the right child of 12 labeled 18?", "score": 0.15}, {"question": "Is the left child of 18 labeled 15?", "score": 0.2}, {"question": "Is the right child of 18 labeled 21?", "score": 0.2}, {"question": "Are all nodes correctly connected according to binary search tree insertion rules?", "score": 0.2}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Search_Tree", "img_type": "diagrams", "difficulty": "easy"}
{"id": "Computer_Science_22", "prompt": "Given the 8-bit binary number 10110101, illustrate both a left logical shift and a right logical shift by one position. Clearly show the original number, the result after each shift, and indicate how the bits move and what values are introduced at the vacated positions. Label the most significant bit (MSB) and least significant bit (LSB) in your diagram.", "image_path": "Computer_Science/Computer_Science_22.png", "scoring_points": [{"question": "Does the image show the original 8-bit binary number 10110101?", "score": 0.1}, {"question": "Is there a diagram for a left logical shift by one position?", "score": 0.1}, {"question": "Is there a diagram for a right logical shift by one position?", "score": 0.1}, {"question": "In the left logical shift, do all bits move one position to the left and is a 0 introduced at the LSB?", "score": 0.15}, {"question": "In the right logical shift, do all bits move one position to the right and is a 0 introduced at the MSB?", "score": 0.15}, {"question": "Are the resulting binary numbers after the left and right shifts correct (01101010 and 01011010, respectively)?", "score": 0.2}, {"question": "Are the MSB and LSB clearly labeled in the diagram?", "score": 0.1}, {"question": "Are the directions of bit movement indicated with arrows or similar visual cues?", "score": 0.1}], "taxonomy": "Computer/Hardware_Architecture/Pipeline", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_66", "prompt": "Draw a directed graph with 5 vertices labeled 0 to 4. Add directed edges from 0 to 1, 0 to 2, 1 to 2, 2 to 1, 1 to 4, 3 to 2, 4 to 3, and 0 to 4. Arrange the vertices so that 0 is at the top, 1 below 0, 2 to the left of 1, 3 below 1, and 4 to the right of 3.", "image_path": "Computer_Science/Computer_Science_66.png", "scoring_points": [{"question": "Are there exactly 5 vertices labeled 0, 1, 2, 3, and 4?", "score": 0.1}, {"question": "Is there a directed edge from 0 to 1?", "score": 0.1}, {"question": "Is there a directed edge from 0 to 2?", "score": 0.1}, {"question": "Is there a directed edge from 1 to 2 and 2 to 1?", "score": 0.1}, {"question": "Is there a directed edge from 1 to 4?", "score": 0.1}, {"question": "Is there a directed edge from 3 to 2?", "score": 0.1}, {"question": "Is there a directed edge from 4 to 3?", "score": 0.1}, {"question": "Is there a directed edge from 0 to 4?", "score": 0.1}, {"question": "Are the vertices arranged with 0 at the top, 1 below 0, 2 to the left of 1, 3 below 1, and 4 to the right of 3?", "score": 0.2}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Directed_Graph", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_8", "prompt": "Given a cost function J(θ₀, θ₁) for a linear regression problem, generate two plots: (1) a contour plot of J(θ₀, θ₁) in the θ₀-θ₁ plane, with at least three labeled points (A, B, C) at different locations, and (2) a corresponding 3D surface plot of J(θ₀, θ₁) as a function of θ₀ and θ₁, with a labeled point P at the global minimum. Ensure that the contour plot and the 3D plot are aligned.", "image_path": "Computer_Science/Computer_Science_8.png", "scoring_points": [{"question": "Does the image contain both a contour plot and a 3D surface plot of a cost function J(θ₀, θ₁)?", "score": 0.275}, {"question": "Do the plots use θ₀ and θ₁ as the horizontal axes (and J(θ₀, θ₁) as the vertical axis in the 3D plot), consistent with the prompt?", "score": 0.1}, {"question": "Are at least three points (A, B, C) labeled on the contour plot at different locations?", "score": 0.15}, {"question": "Is there a point P labeled at the global minimum in the 3D surface plot?", "score": 0.15}, {"question": "Do the contour plot and 3D plot represent the same cost function J(θ₀, θ₁)?", "score": 0.325}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/Training_and_Testing_Curves", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_56", "prompt": "Graph Theory task: Draw a simple undirected graph with six vertices labeled M, N, O, P, Q, R. Place M–N–O collinear on the top row (left to right). Place R below M, Q below N, and P below O, forming a second row; align Q–P horizontally. Use small circles for vertices and straight segments for edges. Include exactly the following edges: M–N, N–O, Q–P (horizontal); R–M (down-left from M), M–Q (down-right from M), N–Q (down-right from N), and O–P (down-left from O). Do not add any other edges or vertices.", "image_path": "Computer_Science/Computer_Science_56.png", "scoring_points": [{"question": "Are there exactly six labeled vertices: M, N, O on the top row and R, Q, P on the bottom row?", "score": 0.08}, {"question": "Are M, N, O approximately collinear and ordered left-to-right on the top row?", "score": 0.1}, {"question": "Are R, Q, P placed roughly beneath M, N, O respectively, with Q and P horizontally aligned?", "score": 0.1}, {"question": "Is the graph undirected with vertices shown as small circles and edges as straight segments?", "score": 0.06}, {"question": "Are the horizontal edges M–N, N–O, and Q–P present?", "score": 0.12}, {"question": "Is the edge R–M present?", "score": 0.12}, {"question": "Are the diagonal edges M–Q and N–Q both present?", "score": 0.12}, {"question": "Is the diagonal edge O–P present?", "score": 0.12}, {"question": "Are there no extra edges beyond the specified set?", "score": 0.18}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Undirected_Graph", "img_type": "geometric shapes", "difficulty": "easy"}
{"id": "Computer_Science_69", "prompt": "Draw an Entity-Relationship (ER) diagram for a banking system that includes the following entities: BANK, BANK_BRANCH, ACCOUNT, LOAN, and CUSTOMER. The BANK entity should have attributes Code, Name, and Addr. Each BANK can have multiple BANK_BRANCHes, each with attributes Addr and Branch_no. Each BANK_BRANCH can have multiple ACCOUNTs and LOANs, with ACCOUNT having attributes Acct_no, Balance, and Type, and LOAN having attributes Loan_no, Amount, and Type. Each CUSTOMER (with attributes Ssn, Name, Phone, and Addr) can have multiple ACCOUNTs and LOANs, and each ACCOUNT or LOAN can be associated with multiple CUSTOMERS. Clearly indicate all relationships, their cardinalities, and connect attributes to their respective entities.", "image_path": "Computer_Science/Computer_Science_69.png", "scoring_points": [{"question": "Are there exactly five entities: BANK, BANK_BRANCH, ACCOUNT, LOAN, and CUSTOMER?", "score": 0.08}, {"question": "Is there a relationship between BANK and BANK_BRANCH with cardinality 1:N (1 at BANK, N at BANK_BRANCH)?", "score": 0.24}, {"question": "Are the specified attributes shown for BANK(Code, Name, Addr), ACCOUNT(Acct_no, Balance, Type), LOAN(Loan_no, Amount, Type), and CUSTOMER(Ssn, Name, Phone, Addr)?", "score": 0.24}, {"question": "Are the BANK_BRANCH attributes Addr and Branch_no shown and connected to the BANK_BRANCH entity?", "score": 0.1}, {"question": "Is there a relationship between BANK_BRANCH and ACCOUNT with cardinality 1:N (1 at BANK_BRANCH, N at ACCOUNT)?", "score": 0.1}, {"question": "Is there a relationship between BANK_BRANCH and LOAN with cardinality 1:N (1 at BANK_BRANCH, N at LOAN)?", "score": 0.1}, {"question": "Is there an M:N relationship between ACCOUNT and CUSTOMER?", "score": 0.07}, {"question": "Is there an M:N relationship between LOAN and CUSTOMER?", "score": 0.07}], "taxonomy": "Computer/Data_Structures_and_Algorithms/ER_Diagram", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_6", "prompt": "Machine learning diagnostics: Draw learning curves (error vs. training set size m) for a model suffering from high bias. Plot two smooth curves on the same axes: training error J_train(θ) and test error J_test(θ). Requirements: as m increases, J_train(θ) should increase from very low error and then plateau; J_test(θ) should decrease from high error and then plateau. J_test(θ) stays slightly above J_train(θ) across m. Axes: horizontal is m (Training Set Size), vertical is Error.", "image_path": "Computer_Science/Computer_Science_6.png", "scoring_points": [{"question": "Are there exactly two smooth error curves plotted against training set size on shared axes?", "score": 0.1}, {"question": "Does the training error increase with m and then approach a plateau?", "score": 0.28}, {"question": "Does the test error decrease with m and then approach a plateau?", "score": 0.28}, {"question": "Is the common large-m error level noticeably above zero (indicating high bias)?", "score": 0.14}, {"question": "Is J_test(θ) consistently above J_train(θ) over most values of m?", "score": 0.12}, {"question": "Are the horizontal and vertical axes representing training set size and error respectively (increasing rightward and upward)?", "score": 0.08}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/Training_and_Testing_Curves", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_32", "prompt": "Computer architecture diagramming task: Illustrate buffered sequential file access for fixed-length logical records using a one-record input buffer. Draw two subfigures, (a) and (b). Each shows a vertical file of consecutive logical records numbered from 14 upward to at least 25, and a separate main-memory box containing a single-record buffer. In (a), depict the state immediately before reading record 19: record 18 is already in the buffer, and record 19 in the file is highlighted/boxed as the next record to be read. In (b), depict the state immediately before reading record 20: record 19 now resides in the buffer, and record 20 in the file is highlighted/boxed as the next to be read. Indicate visually that the buffer holds exactly one logical record (e.g., a brace labeled \"1 logical record\").", "image_path": "Computer_Science/Computer_Science_32.png", "scoring_points": [{"question": "Are there two subfigures, (a) and (b), each showing the file and a separate main-memory buffer?", "score": 0.1}, {"question": "Is the file represented as a vertical stack of fixed-size logical records?", "score": 0.15}, {"question": "In subfigure (a), is record 18 shown residing in the buffer while record 19 in the file is visually marked as the next to be read?", "score": 0.2}, {"question": "In subfigure (b), is record 19 shown residing in the buffer while record 20 in the file is visually marked as the next to be read?", "score": 0.2}, {"question": "Does the buffer contain exactly one logical record in both subfigures?", "score": 0.15}, {"question": "Do both subfigures preserve the same file ordering so that the next record increases from 19 to 20 between (a) and (b)?", "score": 0.1}, {"question": "Is the main memory drawn as a box containing the single-record buffer in both subfigures?", "score": 0.1}], "taxonomy": "Computer/Hardware_Architecture/Cache/Others", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_20", "prompt": "Draw a state diagram of a non-deterministic finite automaton (NFA) with three states labeled 1, 2, and 3. State 1 is the start and accepting state. The transitions are as follows: from state 1, there is a transition to state 3 on input 'a', and a transition to state 2 on input 'b'; from state 2, there is a self-loop on 'a', and a transition to state 3 on input 'a' or 'b'; from state 3, there is an epsilon (ε) transition to state 1. Clearly indicate the start state, accepting state, and label all transitions.", "image_path": "Computer_Science/Computer_Science_20.png", "scoring_points": [{"question": "Are there exactly three states labeled 1, 2, and 3?", "score": 0.1}, {"question": "Is state 1 marked as both the start and accepting state?", "score": 0.15}, {"question": "Is there a transition from state 1 to state 3 on input 'a'?", "score": 0.1}, {"question": "Is there a transition from state 1 to state 2 on input 'b'?", "score": 0.1}, {"question": "Is there a self-loop on state 2 labeled 'a'?", "score": 0.1}, {"question": "Is there a transition from state 2 to state 3 on input 'a' or 'b'?", "score": 0.15}, {"question": "Is there an epsilon (ε) transition from state 3 to state 1?", "score": 0.2}, {"question": "Are all transitions correctly labeled and directed?", "score": 0.1}], "taxonomy": "Computer/Theory_and_AI/Finite_Automaton", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_44", "prompt": "Draw a diagram illustrating the process of inserting a new node with value 30 at the correct position in a singly linked list containing the nodes 10, 20, 40, and 50 (in that order), such that the new node is inserted between nodes 20 and 40. Clearly show the head pointer, the next pointers before and after insertion, and indicate the updated links resulting from the insertion operation.", "image_path": "Computer_Science/Computer_Science_44.png", "scoring_points": [{"question": "Are the nodes clearly depicted as singly linked list nodes with a data part and a next-pointer indicator?", "score": 0.1}, {"question": "Are the initial nodes shown in the order 10 → 20 → 40 → 50 before insertion?", "score": 0.25}, {"question": "Is there a head pointer pointing to the first node (10)?", "score": 0.1}, {"question": "Is a new node with data 30 shown and inserted between nodes 20 and 40?", "score": 0.25}, {"question": "Is the original link 20 → 40 shown for the 'before' state and then replaced by the updated links in the 'after' state?", "score": 0.15}, {"question": "After insertion, are the updated links 20 → 30 and 30 → 40 clearly shown?", "score": 0.15}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Linked_List", "img_type": "diagrams", "difficulty": "medium"}
{"id": "Computer_Science_55", "prompt": "Draw an undirected simple graph with six nodes labeled A, B, C, D, E, and F, where the edges are as follows: A is connected to B and C; B is connected to C and D; C is connected to D and E; D is connected to E and F. Ensure that all edges are unweighted and the graph is planar.", "image_path": "Computer_Science/Computer_Science_55.png", "scoring_points": [{"question": "Are there exactly six nodes labeled A, B, C, D, E, and F?", "score": 0.15}, {"question": "Is there an undirected edge between A and B?", "score": 0.1}, {"question": "Is there an undirected edge between A and C?", "score": 0.1}, {"question": "Is there an undirected edge between B and C?", "score": 0.1}, {"question": "Is there an undirected edge between B and D?", "score": 0.1}, {"question": "Is there an undirected edge between C and D?", "score": 0.1}, {"question": "Is there an undirected edge between C and E?", "score": 0.1}, {"question": "Is there an undirected edge between D and E?", "score": 0.1}, {"question": "Is there an undirected edge between D and F?", "score": 0.15}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Undirected_Graph", "img_type": "trees and graphs", "difficulty": "medium"}
{"id": "Computer_Science_58", "prompt": "Draw an undirected weighted graph with 4 nodes labeled v1, v2, v3, and v4. Connect nodes vi and vj with an edge if and only if 0 < |i - j| <= 2. Assign each edge a weight equal to i + j, and clearly label the weights on the edges.", "image_path": "Computer_Science/Computer_Science_58.png", "scoring_points": [{"question": "Are there exactly 4 nodes labeled v1, v2, v3, and v4?", "score": 0.15}, {"question": "Is each edge labeled with a weight equal to the sum of the indices of its endpoints (i + j)?", "score": 0.35}, {"question": "Are all possible valid edges (according to the rule) present and no extra edges?", "score": 0.3}, {"question": "Are the edge weights clearly visible and correctly placed on the corresponding edges?", "score": 0.2}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Undirected_Graph", "img_type": "trees and graphs", "difficulty": "medium"}
{"id": "Computer_Science_74", "prompt": "Draw a binary search tree (BST) with 7 nodes containing the values 1 through 7, such that the root node is 4, the left subtree contains nodes 2, 1, and 3, and the right subtree contains nodes 6, 5, and 7. Indicate the in-order traversal sequence of the tree below the diagram.", "image_path": "Computer_Science/Computer_Science_74.png", "scoring_points": [{"question": "Is the tree a binary search tree with 7 nodes labeled 1 to 7?", "score": 0.1}, {"question": "Is the root node labeled 4?", "score": 0.1}, {"question": "Does the left subtree of the root contain nodes 2, 1, and 3 arranged as a BST?", "score": 0.15}, {"question": "Does the right subtree of the root contain nodes 6, 5, and 7 arranged as a BST?", "score": 0.15}, {"question": "Is the in-order traversal sequence shown below the tree as '1 2 3 4 5 6 7'?", "score": 0.25}, {"question": "Are the parent-child relationships consistent with BST properties (left < parent < right) for all nodes?", "score": 0.25}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Traversal", "img_type": "trees and graphs", "difficulty": "easy"}
{"id": "Computer_Science_76", "prompt": "Draw a binary expression tree that represents the arithmetic expression ((A * B + C) / (D * E + (F - G))). Each internal node should be an operator (+, -, *, /), and each leaf node should be a variable (A, B, C, D, E, F, G).", "image_path": "Computer_Science/Computer_Science_76.png", "scoring_points": [{"question": "Is the root node the division operator '/'?", "score": 0.1}, {"question": "Is the left subtree of the root a '+' node with left child '*' (A, B) and right child 'C'?", "score": 0.2}, {"question": "Is the right subtree of the root a '+' node with left child '*' (D, E) and right child '-' (F, G)?", "score": 0.2}, {"question": "Are all leaf nodes labeled with the variables A, B, C, D, E, F, and G?", "score": 0.1}, {"question": "Are all internal nodes labeled with the correct operators corresponding to the expression ((A * B + C) / (D * E + (F - G)))?", "score": 0.2}, {"question": "Is the tree a proper binary tree (each operator node has exactly two children)?", "score": 0.2}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Syntax_Tree", "img_type": "trees and graphs", "difficulty": "medium"}
{"id": "Computer_Science_65", "prompt": "Draw the Cayley digraph for the dihedral group D4, using the generators r (rotation) and s (reflection). Represent each group element as a node, and use directed edges to indicate the action of r and s. Clearly distinguish the direction and type of each generator's action, and label all nodes with the corresponding group elements.", "image_path": "Computer_Science/Computer_Science_65.png", "scoring_points": [{"question": "Are there 8 nodes, each labeled with a distinct element of D4 (identity, r, r^2, r^3, s, rs, r^2s, r^3s)?", "score": 0.25}, {"question": "Are directed edges drawn to represent the action of the generator r (rotation) from each node to its image under r?", "score": 0.15}, {"question": "Are directed edges drawn to represent the action of the generator s (reflection) from each node to its image under s?", "score": 0.15}, {"question": "Are the directions of the edges for r and s clearly indicated and distinct (e.g., with arrows or different styles)?", "score": 0.15}, {"question": "Are all possible actions of r and s from each group element correctly represented in the diagram?", "score": 0.3}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Directed_Graph", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_53", "prompt": "Computer Science/Graph Algorithms task: Draw two side-by-side panels. Left: a directed acyclic graph (DAG) with seven circular nodes labeled A, B, C, D, E, F, G arranged similarly in both panels. Required directed edges (only these) in the left DAG: A->D, A->B, A->E, D->E, B->C, B->G, E->F, E->G, C->G, G->F. Right panel: draw the transitive closure of this DAG using the same node positions. Keep the original edges in black, and add in red every additional reachability edge implied by transitivity but missing in the left panel. Specifically, include A->C, A->F, A->G, D->F, and D->G as added edges; do not add any edge from B to E or F. Make the right panel visually denser due to the red additions. No extra nodes or edges beyond those implied by reachability.", "image_path": "Computer_Science/Computer_Science_53.png", "scoring_points": [{"question": "Are there exactly two side-by-side panels, left for the original DAG and right for its transitive closure?", "score": 0.08}, {"question": "Do both panels contain exactly the nodes A, B, C, D, E, F, G with consistent relative positions between panels?", "score": 0.12}, {"question": "In the left panel, are the only edges A->D, A->B, A->E, D->E, B->C, B->G, E->F, E->G, G->F, and C->G?", "score": 0.18}, {"question": "In the right panel, does it preserve all original edges and add only reachability edges implied by transitivity, excluding any edges from B to E or B to F?", "score": 0.15}, {"question": "In the right panel, are A->C, A->F, and A->G present as added edges (not present on the left)?", "score": 0.16}, {"question": "In the right panel, are D->F and D->G present as added edges (not present on the left)?", "score": 0.12}, {"question": "In the right panel, are there no added edges from B to E or B to F?", "score": 0.09}, {"question": "In the right panel, are the original edges in black and the added reachability edges in red?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Graph_Algorithms", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_70", "prompt": "Draw an Entity-Relationship (ER) diagram that models the following scenario: There is a strong entity type called Employee with attributes Employee_id (as the key attribute), Emp_name, Job_title, Address, and Salary. There is a weak entity type called Dependant with attributes Name (as the discriminator), Relation, and Age. Each Dependant must be associated with an Employee through an identifying relationship called 'has', with total participation from the Dependant side. Clearly distinguish between strong and weak entities, key attributes, and discriminators in your diagram.", "image_path": "Computer_Science/Computer_Science_70.png", "scoring_points": [{"question": "Does the diagram include a strong entity type named Employee?", "score": 0.1}, {"question": "Are the attributes Employee_id (as key), Emp_name, Job_title, Address, and Salary shown for Employee?", "score": 0.15}, {"question": "Is Employee_id clearly marked as the key attribute?", "score": 0.1}, {"question": "Does the diagram include a weak entity type named Dependant?", "score": 0.1}, {"question": "Are the attributes Name (as discriminator), Relation, and Age shown for Dependant?", "score": 0.15}, {"question": "Is Name clearly marked as the discriminator for Dependant?", "score": 0.1}, {"question": "Is there an identifying relationship called 'has' connecting Employee and Dependant?", "score": 0.1}, {"question": "Is total participation indicated from Dependant to the 'has' relationship?", "score": 0.1}, {"question": "Are strong and weak entities visually distinguished in the diagram?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/ER_Diagram", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_9", "prompt": "Draw three separate scatter plots, each showing the relationship between two features X and Y. In the first plot, X and Y should have a strong positive linear correlation. In the second plot, X and Y should have a strong negative linear correlation. In the third plot, X and Y should show no apparent correlation. Arrange the three plots side by side from left to right.", "image_path": "Computer_Science/Computer_Science_9.png", "scoring_points": [{"question": "Are there three separate scatter plots arranged side by side?", "score": 0.15}, {"question": "Does the first (leftmost) plot show a strong positive linear correlation between X and Y?", "score": 0.3}, {"question": "Does the second (middle) plot show a strong negative linear correlation between X and Y?", "score": 0.3}, {"question": "Does the third (rightmost) plot show no apparent correlation between X and Y?", "score": 0.25}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/Multicollinearity", "img_type": "plots and charts", "difficulty": "hard"}
{"id": "Computer_Science_80", "prompt": "Draw a red-black tree with the following properties: The root node is 11 (black). The left subtree of 11 has a black node 7, with red children 5 and 10. The right subtree of 11 has a red node 13, with a black left child 12 and a black right child 15. Node 15 has two red children: 14 (left) and 17 (right). Ensure all red-black tree properties are satisfied and clearly indicate the color of each node.", "image_path": "Computer_Science/Computer_Science_80.png", "scoring_points": [{"question": "Is the root node 11 and colored black?", "score": 0.1}, {"question": "Does the left child of 11 have value 7 and is colored black?", "score": 0.1}, {"question": "Are the children of 7 nodes 5 and 10, both colored red?", "score": 0.1}, {"question": "Does the right child of 11 have value 13 and is colored red?", "score": 0.1}, {"question": "Is the left child of 13 node 12 and colored black?", "score": 0.1}, {"question": "Is the right child of 13 node 15 and colored black?", "score": 0.1}, {"question": "Are the children of 15 nodes 14 (left) and 17 (right), both colored red?", "score": 0.1}, {"question": "Are all red-black tree properties (no two consecutive red nodes, equal black height for all paths, etc.) satisfied?", "score": 0.3}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Search_Tree", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_77", "prompt": "Using the following context-free grammar: S→NP VP; VP→V NP; NP→DetP N | AdjP NP; AdjP→Adj | Adv AdjP; N→boy | girl; V→sees | likes; Adj→big | small; Adv→very; DetP→a | the. Draw a partial leftmost-derivation parse tree for the sentential form \"the boy likes NP\". Expand S into NP VP; expand the left NP into DetP N with terminals DetP=the and N=boy; expand VP into V NP with V=likes; leave the rightmost NP unexpanded (still a nonterminal). Place S at the root and show the grammar rules listed beside the tree.", "image_path": "Computer_Science/Computer_Science_77.png", "scoring_points": [{"question": "Is there a parse tree whose root is S with exactly two children NP and VP?", "score": 0.12}, {"question": "Does the left NP expand into DetP and N, with terminals under them being the (DetP) and boy (N)?", "score": 0.18}, {"question": "Does the VP expand into V and NP, with V realized as the terminal likes and the right NP left unexpanded as a nonterminal?", "score": 0.25}, {"question": "Are the chosen terminals (the, boy, likes) valid expansions according to the provided productions DetP→a|the, N→boy|girl, V→sees|likes?", "score": 0.12}, {"question": "Does the configuration correspond to a leftmost partial derivation of the sentential form \"the boy likes NP\" (i.e., only the leftmost NP is expanded)?", "score": 0.25}, {"question": "Are the grammar production rules listed alongside the tree in the image?", "score": 0.08}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Syntax_Tree", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_50", "prompt": "Draw an undirected graph (no arrowheads) with 8 vertices arranged and connected as follows. Place one central vertex near the upper-right; it has degree 4. To its left side, form a short chain: a leftmost leaf connected to a vertex above-left of the central vertex, which in turn connects to the central vertex. From the central vertex, create a 5-vertex simple cycle: go down-left to a vertex, then further down-left to a bottom-left vertex, then horizontally to a bottom-center vertex, then up-right to a vertex below-right of the central vertex, and finally back to the central vertex. Also attach a single leaf to the right of the central vertex (degree 1). Use straight edges.", "image_path": "Computer_Science/Computer_Science_50.png", "scoring_points": [{"question": "Are all edges undirected straight segments with no arrowheads?", "score": 0.15}, {"question": "Is there a central vertex of degree 4 located near the upper-right of the layout?", "score": 0.15}, {"question": "Is there a left-side chain where a leftmost leaf connects to a vertex above-left of the central vertex, which then connects to the central vertex?", "score": 0.275}, {"question": "Does a 5-vertex simple cycle start at the central vertex, go down-left, further down-left, then horizontally to bottom-center, then up-right, and close back to the central vertex?", "score": 0.375}, {"question": "Is there exactly one leaf to the right of the central vertex connected only to it, and are there no extra edges beyond those described?", "score": 0.05}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Graph_Algorithms", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_42", "prompt": "Draw the complete recursion and merge tree for the Merge Sort algorithm when sorting the array [38, 27, 43, 3, 9, 82, 10]. Clearly show each step of the division (splitting into subarrays) and the merging process, labeling the arrays at each node of the tree.", "image_path": "Computer_Science/Computer_Science_42.png", "scoring_points": [{"question": "Does the image show a tree structure representing the recursive process of Merge Sort?", "score": 0.1}, {"question": "Is the initial array at the root node [38, 27, 43, 3, 9, 82, 10]?", "score": 0.1}, {"question": "Are all division steps shown, splitting arrays into halves down to single elements?", "score": 0.15}, {"question": "Are all merge steps shown, combining single elements back up to the sorted array?", "score": 0.15}, {"question": "Are the arrays at each node correctly labeled according to the Merge Sort process?", "score": 0.2}, {"question": "Is the final sorted array [3, 9, 10, 27, 38, 43, 82] shown at the bottom of the tree?", "score": 0.2}, {"question": "Are the division and merge processes clearly delineated in the diagram, making it clear which steps correspond to splitting and which to merging?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Sorting", "img_type": "trees and graphs", "difficulty": "medium"}
{"id": "Computer_Science_40", "prompt": "Draw a comparative graph showing the growth rates of the following algorithmic time complexities as functions of input size n: O(1), O(log n), O(n), O(n log n), O(n^2), O(n^3), O(2^n), and O(n!). Label each curve with its corresponding Big-O notation and ensure the y-axis represents the number of computations and the x-axis represents input size n.", "image_path": "Computer_Science/Computer_Science_40.png", "scoring_points": [{"question": "Does the image have axes labeled with input size n (x-axis) and number of computations (y-axis)?", "score": 0.1}, {"question": "Are there separate curves for each of the following time complexities: O(1), O(log n), O(n), O(n log n), O(n^2), O(n^3), O(2^n), and O(n!)?", "score": 0.25}, {"question": "Is each curve correctly labeled with its corresponding Big-O notation?", "score": 0.25}, {"question": "Does the O(1) curve appear as a horizontal line?", "score": 0.1}, {"question": "Does the O(log n) curve grow slower than O(n) and O(n log n)?", "score": 0.1}, {"question": "Does the O(n log n) curve grow faster than O(n) but slower than O(n^2)?", "score": 0.1}, {"question": "Do the O(2^n) and O(n!) curves grow much faster than the polynomial curves (O(n^2), O(n^3)) as n increases?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms", "img_type": "plots and charts", "difficulty": "hard"}
{"id": "Computer_Science_54", "prompt": "Draw the undirected graph known as the 3-dimensional cube (or hypercube) graph, where each vertex represents a 3-bit binary string and edges connect vertices whose binary labels differ by exactly one bit. Arrange the vertices so that the graph visually resembles a cube projected onto the plane.", "image_path": "Computer_Science/Computer_Science_54.png", "scoring_points": [{"question": "Are there 8 vertices in the graph?", "score": 0.1}, {"question": "Are the vertices connected such that each vertex has degree 3?", "score": 0.2}, {"question": "Are the edges drawn so that the graph forms the structure of a cube (with two parallel squares and corresponding vertices connected)?", "score": 0.3}, {"question": "Is the graph undirected (no arrows on edges)?", "score": 0.1}, {"question": "Do the edges connect the appropriate pairs of vertices to realize the 3-cube adjacency (i.e., each edge links vertices that differ by exactly one bit), regardless of whether edges are straight?", "score": 0.3}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Undirected_Graph", "img_type": "geometric shapes", "difficulty": "medium"}
{"id": "Computer_Science_98", "prompt": "Given a complete binary tree with nodes labeled 1 to 7, where node 1 is the root, nodes 2 and 3 are its left and right children, nodes 4 and 5 are the left and right children of node 2, and nodes 6 and 7 are the left and right children of node 3, draw the tree structure and provide the sequences for its inorder, preorder, postorder, and level order traversals.", "image_path": "Computer_Science/Computer_Science_98.png", "scoring_points": [{"question": "Is a binary tree with 7 nodes arranged in 3 levels depicted?", "score": 0.08}, {"question": "Is node 1 the root with node 2 as its left child and node 3 as its right child?", "score": 0.12}, {"question": "Are nodes 4 and 5 the left and right children of node 2, respectively?", "score": 0.12}, {"question": "Are nodes 6 and 7 the left and right children of node 3, respectively?", "score": 0.12}, {"question": "Does the inorder traversal shown correspond to 4, 2, 5, 1, 6, 3, 7?", "score": 0.14}, {"question": "Does the preorder traversal shown correspond to 1, 2, 4, 5, 3, 6, 7?", "score": 0.14}, {"question": "Does the postorder traversal shown correspond to 4, 5, 2, 6, 7, 3, 1?", "score": 0.14}, {"question": "Does the level order traversal shown correspond to 1, 2, 3, 4, 5, 6, 7?", "score": 0.14}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Traversal", "img_type": "trees and graphs", "difficulty": "easy"}
{"id": "Computer_Science_47", "prompt": "Draw the adjacency list representation of a directed graph with four vertices (v0, v1, v2, v3), where the adjacency lists are as follows: v0 points to v3, v2, and v1; v1 points to v2 and v0; v2 points to v3, v1, and v0; v3 points to v2 and v0. Use standard linked list notation for each adjacency list.", "image_path": "Computer_Science/Computer_Science_47.png", "scoring_points": [{"question": "Are there four vertices labeled v0, v1, v2, and v3?", "score": 0.1}, {"question": "Does the adjacency list for v0 contain v3, v2, and v1 in that order?", "score": 0.2}, {"question": "Does the adjacency list for v1 contain v2 and v0 in that order?", "score": 0.2}, {"question": "Does the adjacency list for v2 contain v3, v1, and v0 in that order?", "score": 0.2}, {"question": "Does the adjacency list for v3 contain v2 and v0 in that order?", "score": 0.2}, {"question": "Are the adjacency lists represented using linked list notation?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Adjacency_List", "img_type": "diagrams", "difficulty": "medium"}
{"id": "Computer_Science_68", "prompt": "Draw a directed acyclic graph (DAG) with five vertices labeled a, b, c, d, and e, such that: vertex a has outgoing edges to vertices b, c, and e; vertex b has an outgoing edge to vertex c; vertex c has an outgoing edge to vertex d; and vertex e has an outgoing edge to vertex d. Arrange the vertices and edges clearly to show the direction of each edge.", "image_path": "Computer_Science/Computer_Science_68.png", "scoring_points": [{"question": "Are there exactly five vertices labeled a, b, c, d, and e?", "score": 0.1}, {"question": "Does vertex a have outgoing edges to b, c, and e?", "score": 0.2}, {"question": "Does vertex b have an outgoing edge to c?", "score": 0.15}, {"question": "Does vertex c have an outgoing edge to d?", "score": 0.15}, {"question": "Does vertex e have an outgoing edge to d?", "score": 0.15}, {"question": "Are all edges directed and clearly indicate their direction?", "score": 0.15}, {"question": "Is the graph acyclic (no cycles present)?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Directed_Graph", "img_type": "trees and graphs", "difficulty": "medium"}
{"id": "Computer_Science_79", "prompt": "Draw a binary search tree containing the following integer values inserted in this order: 17, 12, 35, 6, 14, 40, 42. Ensure that the binary search tree property is maintained at every node.", "image_path": "Computer_Science/Computer_Science_79.png", "scoring_points": [{"question": "Are all the given values (17, 12, 35, 6, 14, 40, 42) present as nodes in the tree?", "score": 0.15}, {"question": "Is the tree structured as a binary tree (each node has at most two children)?", "score": 0.1}, {"question": "Is 17 the root of the tree?", "score": 0.1}, {"question": "Are the left and right children of each node correctly placed according to the binary search tree property (left < parent < right)?", "score": 0.4}, {"question": "Is the insertion order reflected in the tree structure (i.e., the tree is not balanced or rearranged after insertion)?", "score": 0.15}, {"question": "Are there no extra nodes or missing nodes?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Search_Tree", "img_type": "trees and graphs", "difficulty": "easy"}
{"id": "Computer_Science_82", "prompt": "Draw a red-black tree containing the integers 2, 3, 4, 5, and 6, such that it satisfies all red-black tree properties. Use black and red colors to indicate the color of each node, and ensure the tree is a valid binary search tree.", "image_path": "Computer_Science/Computer_Science_82.png", "scoring_points": [{"question": "Are all five integers (2, 3, 4, 5, 6) present in the tree?", "score": 0.1}, {"question": "Is the tree a valid binary search tree (BST)?", "score": 0.3}, {"question": "Are the colors of the nodes clearly indicated (red or black)?", "score": 0.1}, {"question": "Does the tree satisfy all red-black tree properties (root is black, no two consecutive red nodes, equal black height on all paths, etc.)?", "score": 0.5}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Search_Tree", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_75", "prompt": "Draw a binary tree with the following structure: The root node is labeled 'A'. 'A' has two children: 'B' (left) and 'C' (right). 'B' has two children: 'D' (left) and 'E' (right). 'D' has two children: 'H' (left) and 'I' (right). 'C' has two children: 'F' (left) and 'G' (right). All nodes are labeled with their respective letters.", "image_path": "Computer_Science/Computer_Science_75.png", "scoring_points": [{"question": "Is the root node labeled 'A'?", "score": 0.1}, {"question": "Does 'A' have two children: 'B' on the left and 'C' on the right?", "score": 0.15}, {"question": "Does 'B' have two children: 'D' on the left and 'E' on the right?", "score": 0.15}, {"question": "Does 'D' have two children: 'H' on the left and 'I' on the right?", "score": 0.15}, {"question": "Does 'C' have two children: 'F' on the left and 'G' on the right?", "score": 0.15}, {"question": "Are all nodes labeled with the correct letters (A, B, C, D, E, F, G, H, I)?", "score": 0.15}, {"question": "Is the tree structure binary (each node has at most two children)?", "score": 0.15}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Traversal", "img_type": "trees and graphs", "difficulty": "easy"}
{"id": "Computer_Science_46", "prompt": "Draw the adjacency list representation of a directed graph with 7 vertices labeled V1 to V7, where the adjacency lists are as follows: V1 points to V5, V3, and V2; V2 points to V3 and V4; V3 has no outgoing edges; V4 points to V7; V5 points to V4 and V6; V6 has no outgoing edges; V7 points to V6.", "image_path": "Computer_Science/Computer_Science_46.png", "scoring_points": [{"question": "Are there exactly 7 vertices labeled V1 to V7?", "score": 0.1}, {"question": "Does the adjacency list for V1 contain exactly V5, V3, and V2 (order not important)?", "score": 0.15}, {"question": "Does the adjacency list for V2 contain exactly V3 and V4 (order not important)?", "score": 0.15}, {"question": "Does the adjacency list for V3 show no outgoing edges?", "score": 0.1}, {"question": "Does the adjacency list for V4 contain only V7?", "score": 0.1}, {"question": "Does the adjacency list for V5 contain exactly V4 and V6 (order not important)?", "score": 0.15}, {"question": "Does the adjacency list for V6 show no outgoing edges?", "score": 0.1}, {"question": "Does the adjacency list for V7 contain only V6?", "score": 0.15}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Adjacency_List", "img_type": "trees and graphs", "difficulty": "hard"}
{"id": "Computer_Science_27", "prompt": "Draw a digital logic circuit diagram using only AND, OR, and NOT gates to implement the function that outputs the logical NOR of two intermediate signals X and Y, where X is the output of an OR gate with inputs A and B, and Y is the output of an AND gate with inputs A and B. Clearly indicate the connections and the final output.", "image_path": "Computer_Science/Computer_Science_27.png", "scoring_points": [{"question": "Does the circuit use only AND, OR, and NOT gates?", "score": 0.1}, {"question": "Is there an OR gate with inputs A and B, producing output X?", "score": 0.15}, {"question": "Is there an AND gate with inputs A and B, producing output Y?", "score": 0.15}, {"question": "Is there an OR gate that takes X and Y as inputs, followed by a NOT gate, producing the final NOR output?", "score": 0.3}, {"question": "Are the connections between gates and inputs (A, B) correct according to the described logic?", "score": 0.2}, {"question": "Is the final output clearly marked?", "score": 0.1}], "taxonomy": "Computer/Hardware_Architecture/Digital_Circuits/Logic_Gates", "img_type": "diagrams", "difficulty": "medium"}
{"id": "Computer_Science_1", "prompt": "Draw a block diagram illustrating the main phases of a typical compiler, starting from source code input to target code output. Include the following components in the correct order: Lexical Analyzer, Syntax Analyzer, Semantic Analyzer, Intermediate Code Generator, Machine Independent Code Optimizer, Code Generator, and Machine Dependent Code Optimizer. Additionally, show the Symbol Table and Error Handler as auxiliary components interacting with the appropriate phases. Use arrows to indicate the flow of data and interactions between components.", "image_path": "Computer_Science/Computer_Science_1.png", "scoring_points": [{"question": "Does the diagram start with a source code input and end with a target code output?", "score": 0.1}, {"question": "Are the following main phases present and in correct order: Lexical Analyzer, Syntax Analyzer, Semantic Analyzer, Intermediate Code Generator, Machine Independent Code Optimizer, Code Generator, Machine Dependent Code Optimizer?", "score": 0.25}, {"question": "Is there a Symbol Table shown as an auxiliary component interacting with relevant phases?", "score": 0.15}, {"question": "Is there an Error Handler shown as an auxiliary component interacting with relevant phases?", "score": 0.15}, {"question": "Are arrows used to indicate the flow of data between the main phases and between auxiliary components and main phases?", "score": 0.15}, {"question": "Are all components clearly labeled with their respective names?", "score": 0.2}], "taxonomy": "Computer/Theory_and_AI/Compiler_Principles", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_29", "prompt": "Draw a block diagram of a generic digital multiplexer, labeling the following: n input signals entering from the left, m control signals entering from the top, and a single output signal exiting to the right. Clearly indicate the direction of each signal and label the main block as 'Multiplexer'.", "image_path": "Computer_Science/Computer_Science_29.png", "scoring_points": [{"question": "Is there a main block labeled 'Multiplexer'?", "score": 0.1}, {"question": "Are n input signals shown entering the block from the left and labeled as such?", "score": 0.25}, {"question": "Are m control signals shown entering the block from the top and labeled as such?", "score": 0.25}, {"question": "Is there a single output signal shown exiting the block to the right and labeled as such?", "score": 0.2}, {"question": "Are the directions of all signals (inputs, controls, output) clearly indicated?", "score": 0.2}], "taxonomy": "Computer/Hardware_Architecture/Digital_Circuits/Multiplexer_Application", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_30", "prompt": "Draw a block diagram illustrating the process of parallel to serial data conversion using digital logic components. The diagram should include two multiplexers (MUX 1 and MUX 2) at the first level, each receiving multiple parallel inputs and controlled by select lines. The outputs of the multiplexers should feed into two flip-flops (FF 1 and FF 2) at the second level, which act as registers. The outputs of the flip-flops should then be connected to a decoder at the third level, which produces the final output. Clearly indicate the flow of data and label each component appropriately.", "image_path": "Computer_Science/Computer_Science_30.png", "scoring_points": [{"question": "Are there two multiplexers (MUX 1 and MUX 2) at the first level, each with multiple parallel inputs and select lines?", "score": 0.15}, {"question": "Do the outputs of both multiplexers connect to two flip-flops (FF 1 and FF 2) at the second level?", "score": 0.15}, {"question": "Are the flip-flops (FF 1 and FF 2) acting as registers in the diagram?", "score": 0.1}, {"question": "Do the outputs of the flip-flops connect to a decoder at the third level?", "score": 0.15}, {"question": "Is the decoder producing the final output in the diagram?", "score": 0.1}, {"question": "Is the data flow clearly indicated from multiple parallel inputs through the multiplexers and flip-flops into the decoder, resulting in a single final (serial) output?", "score": 0.15}, {"question": "Are all components (multiplexers, flip-flops, decoder) clearly labeled?", "score": 0.1}, {"question": "Is the function of each stage (multiplexing, registering, decoding) distinguishable in the diagram?", "score": 0.1}], "taxonomy": "Computer/Hardware_Architecture/Digital_Circuits/Multiplexer_Application", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_71", "prompt": "Illustrate the sequence of operations on a queue data structure that starts with the elements 1, 2, 3, 4, 5 (from front to back). First, perform an ENQUEUE operation to add the element 6 to the back of the queue. Next, perform a FRONT operation to access (but not remove) the front element. Finally, perform a DEQUEUE operation to remove the front element. Clearly indicate the positions of the front and back pointers after each operation, and show the state of the queue at each step.", "image_path": "Computer_Science/Computer_Science_71.png", "scoring_points": [{"question": "Does the initial queue contain the elements 1, 2, 3, 4, 5 in order from front to back?", "score": 0.1}, {"question": "After the ENQUEUE operation, is the element 6 added to the back of the queue?", "score": 0.1}, {"question": "Are the front and back pointers correctly indicated after the ENQUEUE operation?", "score": 0.1}, {"question": "After the FRONT operation, is the front element accessed (but not removed) and correctly shown as 1?", "score": 0.2}, {"question": "Are the front and back pointers correctly indicated after the FRONT operation?", "score": 0.1}, {"question": "After the DEQUEUE operation, is the front element (1) removed, leaving 2, 3, 4, 5, 6 in the queue?", "score": 0.2}, {"question": "Are the front and back pointers correctly indicated after the DEQUEUE operation?", "score": 0.2}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Queue", "img_type": "diagrams", "difficulty": "easy"}
{"id": "Computer_Science_28", "prompt": "Draw four pairs of logic gate diagrams, each pair showing two alternative symbols for the same logic function. For each pair, include the Boolean expression for the function above the gate, and ensure that the pairs represent: (1) NAND gate, (2) NOR gate, (3) AND gate, and (4) OR gate. Use standard digital logic symbols and indicate negations with bubbles and overlines as appropriate.", "image_path": "Computer_Science/Computer_Science_28.png", "scoring_points": [{"question": "Are there four pairs of logic gate diagrams in the image?", "score": 0.1}, {"question": "Does each pair show two alternative symbols for the same logic function?", "score": 0.15}, {"question": "Is the Boolean expression for each function included above the gate(s) in each pair?", "score": 0.15}, {"question": "Is one pair representing the NAND gate with correct symbols and Boolean expression (AB with a negation)?", "score": 0.2}, {"question": "Is one pair representing the NOR gate with correct symbols and Boolean expression (A+B with a negation)?", "score": 0.15}, {"question": "Is one pair representing the AND gate with correct symbols and Boolean expression (AB)?", "score": 0.1}, {"question": "Is one pair representing the OR gate with correct symbols and Boolean expression (A+B)?", "score": 0.15}], "taxonomy": "Computer/Hardware_Architecture/Digital_Circuits/Logic_Gates", "img_type": "diagrams", "difficulty": "medium"}
{"id": "Computer_Science_45", "prompt": "Given an undirected graph with three vertices labeled 0, 1, and 2, where each vertex is connected to the other two (i.e., the graph is a complete graph K3), draw both the undirected graph and its adjacency list representation using arrays and linked lists. Clearly indicate the connections in both representations.", "image_path": "Computer_Science/Computer_Science_45.png", "scoring_points": [{"question": "Does the image include an undirected graph with three vertices labeled 0, 1, and 2?", "score": 0.1}, {"question": "Are all three vertices connected to each other, forming a complete graph (K3)?", "score": 0.2}, {"question": "Is there an adjacency list representation shown using an array and linked lists?", "score": 0.2}, {"question": "Does the adjacency list for vertex 0 contain vertices 1 and 2?", "score": 0.15}, {"question": "Does the adjacency list for vertex 1 contain vertices 0 and 2?", "score": 0.15}, {"question": "Does the adjacency list for vertex 2 contain vertices 0 and 1?", "score": 0.15}, {"question": "Are the connections in the adjacency list clearly shown, with each array position for 0, 1, and 2 pointing to a linked list containing its neighbor vertices?", "score": 0.05}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Adjacency_List", "img_type": "diagrams", "difficulty": "hard"}
{"id": "Computer_Science_3", "prompt": "Draw a Receiver Operating Characteristic (ROC) curve plot comparing the performance of three binary classification models, labeled M1, M2, and M3. The x-axis should represent the False Positive Rate (ranging from 0 to 1), and the y-axis should represent the True Positive Rate (ranging from 0 to 1). Include a 45-degree diagonal line representing random guessing. Each model's ROC curve should be shown in a distinct color and labeled accordingly (M1, M2, M3).", "image_path": "Computer_Science/Computer_Science_3.png", "scoring_points": [{"question": "Does the image contain a plot with the x-axis labeled as False Positive Rate and the y-axis labeled as True Positive Rate, both ranging from 0 to 1?", "score": 0.15}, {"question": "Are there three distinct ROC curves, each labeled as M1, M2, and M3?", "score": 0.2}, {"question": "Are the ROC curves shown in different colors for each model?", "score": 0.15}, {"question": "Is there a 45-degree diagonal line representing random guessing?", "score": 0.2}, {"question": "Are the ROC curves plotted within the bounds of the axes (from 0 to 1 on both axes)?", "score": 0.1}, {"question": "Are the model labels (M1, M2, M3) clearly associated with their respective curves?", "score": 0.2}], "taxonomy": "Computer/Theory_and_AI/Machine_Learning/ROC_Curve", "img_type": "plots and charts", "difficulty": "hard"}
{"id": "Computer_Science_41", "prompt": "Given the unsorted array [56, 22, 12, 65, 19, 34, 44, 50], draw a step-by-step diagram illustrating the process of merge sort, including all intermediate splitting and merging steps, until the array is fully sorted.", "image_path": "Computer_Science/Computer_Science_41.png", "scoring_points": [{"question": "Does the image start with the unsorted array [56, 22, 12, 65, 19, 34, 44, 50]?", "score": 0.1}, {"question": "Are the splitting steps shown, dividing the array into smaller subarrays down to single elements?", "score": 0.2}, {"question": "Are the merging steps shown, combining subarrays in sorted order at each level?", "score": 0.2}, {"question": "Is the final array fully sorted as [12, 19, 22, 34, 44, 50, 56, 65]?", "score": 0.2}, {"question": "Are all intermediate arrays at each split and merge step correctly displayed?", "score": 0.2}, {"question": "Is the process visually organized so that the sequence of splits and merges is clear and easy to follow?", "score": 0.1}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Sorting", "img_type": "trees and graphs", "difficulty": "medium"}
{"id": "Computer_Science_49", "prompt": "Create a textbook-style schematic for teaching Dijkstra’s algorithm. Draw six red circular vertices labeled a, b, c, d, e, f laid out left-to-right: a at far left; b above c in the left-middle; d above e in the right-middle; f at far right. Add weighted edges: a→b=4, a→c=2, c→b=1, b→d=5, c→e=10, d→f=8, d→e=2, e→f=5. Emphasize the unique shortest path from a to f  by drawing those edges darker; draw the non-chosen edges c→e and d→f in light gray. Include arrowheads on all edges. Below the graph, write an equation to calculate the sum of weights in the shortest path.", "image_path": "Computer_Science/Computer_Science_49.png", "scoring_points": [{"question": "Are there six vertices a, b, c, d, e, f drawn as red circles with labels, arranged left-to-right with a at far left, b above c in the left-middle, d above e in the right-middle, and f at far right?", "score": 0.08}, {"question": "Is there an edge a→b with weight 4?", "score": 0.08}, {"question": "Is there an edge a→c with weight 2?", "score": 0.08}, {"question": "Is there an edge c→b with weight 1?", "score": 0.08}, {"question": "Is there an edge b→d with weight 5?", "score": 0.08}, {"question": "Are there edges d→e with weight 2 and e→f with weight 5?", "score": 0.12}, {"question": "Is there an edge c→e with weight 10 drawn in a lighter (de-emphasized) style?", "score": 0.12}, {"question": "Is there an edge d→f with weight 8 drawn in a lighter (de-emphasized) style?", "score": 0.12}, {"question": "Is the shortest path from a to f highlighted as a→c→b→d→e→f?", "score": 0.16}, {"question": "Is there an equation below the graph showing the sum of the shortest-path edge weights (e.g., 2+1+5+2+5=15)?", "score": 0.08}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Graph/Shortest_Path", "img_type": "trees and graphs", "difficulty": "medium"}
{"id": "Computer_Science_91", "prompt": "Draw a labeled diagram that illustrates and distinguishes the following six types of computer network topologies: Bus, Star, Ring, Tree, Mesh, and Hybrid. Each topology should be represented with a schematic showing the arrangement of nodes and connections, and each should be clearly labeled with its respective name.", "image_path": "Computer_Science/Computer_Science_91.png", "scoring_points": [{"question": "Are there six distinct sub-diagrams, each depicting a different network topology arrangement, and is each sub-diagram clearly labeled with its respective topology name (Bus, Star, Ring, Tree, Mesh, Hybrid)?", "score": 0.1}, {"question": "Does the Bus topology show a single linear backbone with multiple nodes connected via short drop lines and no cycles?", "score": 0.15}, {"question": "Does the Star topology show a single central hub with radial links to peripheral nodes and no direct links between peripherals?", "score": 0.15}, {"question": "Does the Ring topology show nodes connected in a single closed loop where each node has exactly two links (degree 2) and no central hub?", "score": 0.12}, {"question": "Does the Tree topology show a hierarchical branching structure from a root, with parent-child levels and no cycles?", "score": 0.12}, {"question": "Does the Mesh topology show multiple nodes with many inter-node links providing redundant paths (clearly more than a minimal spanning structure)?", "score": 0.15}, {"question": "Does the Hybrid topology clearly combine two or more basic topologies connected together?", "score": 0.13}, {"question": "In each sub-diagram, are nodes depicted as distinct entities and connections shown as explicit links between nodes?", "score": 0.08}], "taxonomy": "Computer/Networking_and_Systems/Computer_Networks/Topology", "img_type": "diagrams", "difficulty": "easy"}
{"id": "Computer_Science_72", "prompt": "Given a binary tree with the following structure: the root node is labeled 1, its left child is 2, its right child is 3; node 2 has left child 4 and right child 5; node 3 has right child 6. Draw the tree and clearly indicate the inorder traversal sequence (Left, Root, Right) of the nodes. Also, visually represent the traversal path from the root to the leftmost node.", "image_path": "Computer_Science/Computer_Science_72.png", "scoring_points": [{"question": "Is the binary tree structure correct with root 1, left child 2, right child 3, 2's children 4 and 5, and 3's right child 6?", "score": 0.3}, {"question": "Are all nodes labeled with the correct numbers (1, 2, 3, 4, 5, 6)?", "score": 0.1}, {"question": "Is the inorder traversal sequence (4, 2, 5, 1, 3, 6) clearly indicated?", "score": 0.4}, {"question": "Is the traversal path from the root to the leftmost node visually represented?", "score": 0.2}], "taxonomy": "Computer/Data_Structures_and_Algorithms/Tree/Traversal", "img_type": "trees and graphs", "difficulty": "easy"}
